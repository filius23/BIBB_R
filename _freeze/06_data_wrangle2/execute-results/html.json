{
  "hash": "f78d01933c2e5bbd4c1fe3e730afa0cc",
  "result": {
    "markdown": "# Data Wrangling II {#wrang2}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nWir gehen nochmal zurück zum Uni-Datensatz vom Anfang:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- data.frame(studs = c(19173,5333,15643), \n                   profs = c(322,67,210),\n                   gegr  = c(1971,1830,1973),\n                   prom_recht = rep(TRUE,3),\n                   uni = c(\"Uni Bremen\",\"Uni Vechta\", \"Uni Oldenburg\"))\ndat2 <- data.frame(studs = c(14954,47269 ,23659,9415 ,38079), \n                   profs = c(250,553,438 ,150,636),\n                   prom_recht = c(FALSE,TRUE,TRUE,TRUE,FALSE),\n                   gegr  = c(1971,1870,1457,1818,1995),\n                   uni = c(\"FH Aachen\",\"RWTH Aachen\",\"Uni Freiburg\",\"Uni Bonn\",\"FH Bonn-Rhein-Sieg\"))\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht           uni\n1 19173   322 1971       TRUE    Uni Bremen\n2  5333    67 1830       TRUE    Uni Vechta\n3 15643   210 1973       TRUE Uni Oldenburg\n```\n:::\n\n```{.r .cell-code}\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs prom_recht gegr                uni\n1 14954   250      FALSE 1971          FH Aachen\n2 47269   553       TRUE 1870        RWTH Aachen\n3 23659   438       TRUE 1457       Uni Freiburg\n4  9415   150       TRUE 1818           Uni Bonn\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg\n```\n:::\n:::\n\n\nMit `bind_rows()` aus `{dplyr}` können wir die beiden `data.frame`s zusammensetzen:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 <- bind_rows(dat1,dat2)\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n:::\n:::\n\n\n\nEs gibt auch `bind_cols()` um Datensätze spaltenweise zusammenzufügen.\nMöglichkeiten, Datensätzen auf Basis einer oder mehrer Identifikationsvariablen zu \"mergen\" lernen wir auch noch [später](#wrang3) kennen.\n\n## Variablen erstellen {#var}\n\nNun sehen wir uns die Möglichkeiten, Variablen zu erstellen, nochmal etwas genauer an.\nGrundsätzlich gibt es zwei Arten, Variablen in einen `data.frame` hinzuzufügen:\n\n### base R: `...$newvar <-`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$studs_to_mean  <- dat3$studs - mean(dat3$studs)\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni studs_to_mean\n1 19173   322 1971       TRUE         Uni Bremen     -2517.625\n2  5333    67 1830       TRUE         Uni Vechta    -16357.625\n3 15643   210 1973       TRUE      Uni Oldenburg     -6047.625\n4 14954   250 1971      FALSE          FH Aachen     -6736.625\n5 47269   553 1870       TRUE        RWTH Aachen     25578.375\n6 23659   438 1457       TRUE       Uni Freiburg      1968.375\n7  9415   150 1818       TRUE           Uni Bonn    -12275.625\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     16388.375\n```\n:::\n:::\n\n\nMit `<- NULL` können Variablen auch gelöscht werden:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$studs_to_mean  <-  NULL\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n:::\n:::\n\n\n\n### {dplyr}: `mutate(neue_var= )`\n\n\nWir hatten die Variante aus `{dplyr}` (`{tidyverse}`) bereits in [Kapitel 3](03_desc.qmd#crosscount) kurz kennen gelernt. Die grundsätzliche Struktur ist immer `datensatz %>% mutate(neue_var = ....)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(studs_to_mean = studs-mean(studs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni studs_to_mean\n1 19173   322 1971       TRUE         Uni Bremen     -2517.625\n2  5333    67 1830       TRUE         Uni Vechta    -16357.625\n3 15643   210 1973       TRUE      Uni Oldenburg     -6047.625\n4 14954   250 1971      FALSE          FH Aachen     -6736.625\n5 47269   553 1870       TRUE        RWTH Aachen     25578.375\n6 23659   438 1457       TRUE       Uni Freiburg      1968.375\n7  9415   150 1818       TRUE           Uni Bonn    -12275.625\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     16388.375\n```\n:::\n:::\n\n\nWir können auch mehrere Variablen innerhalb eines `mutate()`-Befehls erstellen:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(studs_to_mean = studs-mean(studs),\n                profs_to_mean = profs-mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni studs_to_mean profs_to_mean\n1 19173   322 1971       TRUE         Uni Bremen     -2517.625         -6.25\n2  5333    67 1830       TRUE         Uni Vechta    -16357.625       -261.25\n3 15643   210 1973       TRUE      Uni Oldenburg     -6047.625       -118.25\n4 14954   250 1971      FALSE          FH Aachen     -6736.625        -78.25\n5 47269   553 1870       TRUE        RWTH Aachen     25578.375        224.75\n6 23659   438 1457       TRUE       Uni Freiburg      1968.375        109.75\n7  9415   150 1818       TRUE           Uni Bonn    -12275.625       -178.25\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     16388.375        307.75\n```\n:::\n:::\n\n\nOder Variablen können innerhalb von `mutate()` weiterverwendet werden:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(rel_to_mean = studs-mean(studs),\n                above_mean = rel_to_mean > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni rel_to_mean above_mean\n1 19173   322 1971       TRUE         Uni Bremen   -2517.625      FALSE\n2  5333    67 1830       TRUE         Uni Vechta  -16357.625      FALSE\n3 15643   210 1973       TRUE      Uni Oldenburg   -6047.625      FALSE\n4 14954   250 1971      FALSE          FH Aachen   -6736.625      FALSE\n5 47269   553 1870       TRUE        RWTH Aachen   25578.375       TRUE\n6 23659   438 1457       TRUE       Uni Freiburg    1968.375       TRUE\n7  9415   150 1818       TRUE           Uni Bonn  -12275.625      FALSE\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg   16388.375       TRUE\n```\n:::\n:::\n\n\n\nDer Ausgangsdatensatz bleibt aber unverändert:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n:::\n:::\n\n\nWenn wir die Ergebnisse behalten wollen, müssen wir das Ergebnis in einem Objekt ablegen:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat4 <-\n  dat3 %>% \n  mutate(rel_to_mean = studs-mean(studs),\n         above_mean = rel_to_mean > 0)\n\ndat4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni rel_to_mean above_mean\n1 19173   322 1971       TRUE         Uni Bremen   -2517.625      FALSE\n2  5333    67 1830       TRUE         Uni Vechta  -16357.625      FALSE\n3 15643   210 1973       TRUE      Uni Oldenburg   -6047.625      FALSE\n4 14954   250 1971      FALSE          FH Aachen   -6736.625      FALSE\n5 47269   553 1870       TRUE        RWTH Aachen   25578.375       TRUE\n6 23659   438 1457       TRUE       Uni Freiburg    1968.375       TRUE\n7  9415   150 1818       TRUE           Uni Bonn  -12275.625      FALSE\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg   16388.375       TRUE\n```\n:::\n:::\n\n::: callout-tip\n# Dummy-Variablen erstellen mit `as.numeric()`\n\nWenn wir logische Variablen mit `as.numeric()` in numerische Variablen umformatieren erhalten wir eine Dummy-Codierung:\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(dat3$prom_recht )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 0 1 1 1 0\n```\n:::\n\n```{.r .cell-code}\ndat3 %>% \n  mutate(prom_dummy = as.numeric(prom_recht ) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni prom_dummy\n1 19173   322 1971       TRUE         Uni Bremen          1\n2  5333    67 1830       TRUE         Uni Vechta          1\n3 15643   210 1973       TRUE      Uni Oldenburg          1\n4 14954   250 1971      FALSE          FH Aachen          0\n5 47269   553 1870       TRUE        RWTH Aachen          1\n6 23659   438 1457       TRUE       Uni Freiburg          1\n7  9415   150 1818       TRUE           Uni Bonn          1\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg          0\n```\n:::\n:::\n\n\n:::\n\n### [Übung](#mutate1) {#ue06_1}\n\n\n\n## Gruppierung mit `group_by()` & `.by=` {#group_by}\n\nDie wirkliche Stärke von `mutate()` kommt aber erst zum Tragen, wenn wir es mit weiteren `{dplyr}`-Funktionen kombinieren.\nEine häufige Aufgabe in der Datenaufbereitung sind gruppierte Werte.\n\nWir machen unseren Beispieldatensatz noch etwas kleiner:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 <- dat3 %>% \n  select(-uni,-gegr) # nur dass alles zu sehen ist\n```\n:::\n\n\nWenn wir einen Datensatz mit `group_by()` entlang den Werten einer Variablen gruppieren, dann werden alle weiteren `mutate()` Berechnungen nur innerhalb dieser Gruppen ausgeführt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  group_by(prom_recht) %>%\n  mutate(m_studs2 = mean(studs),\n         m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 7\n# Groups:   prom_recht [2]\n  studs profs prom_recht m_studs m_profs m_studs2 m_profs2\n  <dbl> <dbl> <lgl>        <dbl>   <dbl>    <dbl>    <dbl>\n1 19173   322 TRUE        21691.    328.   20082       290\n2  5333    67 TRUE        21691.    328.   20082       290\n3 15643   210 TRUE        21691.    328.   20082       290\n4 14954   250 FALSE       21691.    328.   26516.      443\n5 47269   553 TRUE        21691.    328.   20082       290\n6 23659   438 TRUE        21691.    328.   20082       290\n7  9415   150 TRUE        21691.    328.   20082       290\n8 38079   636 FALSE       21691.    328.   26516.      443\n```\n:::\n:::\n\n\n\nVerwenden wir `group_by()`, können (sollten!) wir mit `ungroup()` die Gruppierung wieder aufheben, sobald wir sie nicht mehr benötigen:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  group_by(prom_recht) %>%\n  mutate(m_studs2 = mean(studs)) %>% \n  ungroup() %>% \n  mutate(m_profs2 = mean(profs))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs prom_recht  m_studs m_profs m_studs2 m_profs2\n1 19173   322       TRUE 21690.62  328.25  20082.0   328.25\n2  5333    67       TRUE 21690.62  328.25  20082.0   328.25\n3 15643   210       TRUE 21690.62  328.25  20082.0   328.25\n4 14954   250      FALSE 21690.62  328.25  26516.5   328.25\n5 47269   553       TRUE 21690.62  328.25  20082.0   328.25\n6 23659   438       TRUE 21690.62  328.25  20082.0   328.25\n7  9415   150       TRUE 21690.62  328.25  20082.0   328.25\n8 38079   636      FALSE 21690.62  328.25  26516.5   328.25\n```\n:::\n:::\n\n\nSeit `{dplyr}`-Version 1.1.1 können wir direkt in `mutate()` mit dem Argument `.by=` eine Gruppierung angeben.\nDiese Gruppierung `.by=` gilt dabei nur für die unmittelbaren Berechnungen innerhalb `mutate()` - wir sparen uns das `ungroup()`.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  mutate(m_studs2 = mean(studs),\n         .by = prom_recht) %>% \n  mutate(m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs prom_recht  m_studs m_profs m_studs2 m_profs2\n1 19173   322       TRUE 21690.62  328.25  20082.0   328.25\n2  5333    67       TRUE 21690.62  328.25  20082.0   328.25\n3 15643   210       TRUE 21690.62  328.25  20082.0   328.25\n4 14954   250      FALSE 21690.62  328.25  26516.5   328.25\n5 47269   553       TRUE 21690.62  328.25  20082.0   328.25\n6 23659   438       TRUE 21690.62  328.25  20082.0   328.25\n7  9415   150       TRUE 21690.62  328.25  20082.0   328.25\n8 38079   636      FALSE 21690.62  328.25  26516.5   328.25\n```\n:::\n:::\n\n\n\nMit `summarise()` statt `mutate()` erhalten wir eine Übersicht:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  summarise(m_studs = mean(studs),.by = prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  prom_recht m_studs\n1       TRUE 20082.0\n2      FALSE 26516.5\n```\n:::\n:::\n\n\n\n\n### [Übung](#grpue) {#ue06_2}\n\n\n## `across()`: Mehrere Variablen bearbeiten {#across}\n\nEine sehr vielseitige Erweiterung für `mutate()` und `summarise()` ist `across()`.\nHier mit können wir eine Funktion auf mehrere Spalten gleichzeitig anwenden, ohne uns zu wiederholen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(studs = mean(studs),\n            profs = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     studs  profs\n1 21690.62 328.25\n```\n:::\n:::\n\n\nHier ist `across()` deutlich kürzer - für die Variablenauswahl können wir die [`?select_helpers`](02_intro.qmd#selecthelpers) verwenden - z.B. `matches()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(.cols = matches(\"studs|profs\"),.fns = ~mean(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     studs  profs\n1 21690.62 328.25\n```\n:::\n:::\n\n\nNatürlich ist das auch kombinierbar mit `group_by()`:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  group_by(prom_recht) %>%\n  summarise(across(matches(\"studs|profs\"), ~mean(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  prom_recht  studs profs\n  <lgl>       <dbl> <dbl>\n1 FALSE      26516.   443\n2 TRUE       20082    290\n```\n:::\n:::\n\n\nWir können auch mehrere Funktionen durchführen, dafür müssen wir sie in einer `list()` angeben:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  group_by(prom_recht) %>%\n  summarise(across(matches(\"studs|profs\"), list(mean = ~mean(.x), sd = ~sd(.x))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  prom_recht studs_mean studs_sd profs_mean profs_sd\n  <lgl>           <dbl>    <dbl>      <dbl>    <dbl>\n1 FALSE          26516.   16352.        443     273.\n2 TRUE           20082    14858.        290     183.\n```\n:::\n:::\n\n\nDiese `list()`auch vorab ablegen und dann verwenden:\n\n::: {.cell}\n\n```{.r .cell-code}\nwert_liste <- list(mean = ~mean(.x), sd = ~sd(.x), max = ~max(.x,na.rm = T))\n\ndat3 %>%\n  group_by(prom_recht) %>%\n  summarise(across(matches(\"studs|profs\"), wert_liste))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 7\n  prom_recht studs_mean studs_sd studs_max profs_mean profs_sd profs_max\n  <lgl>           <dbl>    <dbl>     <dbl>      <dbl>    <dbl>     <dbl>\n1 FALSE          26516.   16352.     38079        443     273.       636\n2 TRUE           20082    14858.     47269        290     183.       553\n```\n:::\n:::\n\n\nMit dem `.names()`-Argument können wir auch die Benennung der Spalten steuern. \n`{.fn}` steht dabei als Platzhalter für die angewendete Funktion, `{.col}` für den Namen der bearbeiteten Variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  group_by(prom_recht) %>%\n  summarise(across(matches(\"studs|profs\"), \n                   list(mean = ~mean(.x), sd = ~sd(.x)),\n                   .names = \"{.fn}_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  prom_recht mean_studs sd_studs mean_profs sd_profs\n  <lgl>           <dbl>    <dbl>      <dbl>    <dbl>\n1 FALSE          26516.   16352.        443     273.\n2 TRUE           20082    14858.        290     183.\n```\n:::\n:::\n\n\n\n<!-- ...eine sehr praktische Hilfsfunktion aus `{dplyr}` ist `n()` - so erhalten wir die Fallzahlen. Allerdings werden so auch ggf. Zeilen mit `NA` mitgezählt, sodass wir für die Zähler alle nicht-`NA` Zeilen eine anderen Lösung brauchen, bspw. `sum(!is.na(.x))` - also die Summe der \"is not NA\"==`TRUE`: -->\n\n<!-- ```{r} -->\n<!-- dat3 %>% -->\n<!--   group_by(prom_recht) %>% -->\n<!--   summarise(across(matches(\"studs|profs\"),  -->\n<!--                    list(mean = ~mean(.x), sd = ~sd(.x), n = ~n(), notNA = ~sum(!is.na(.x))), -->\n<!--                    .names = \"{.fn}_{.col}\")) -->\n<!-- ``` -->\n\n\nAlle gezeigten Funktionen funktionieren natürlich auch mit `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  mutate(across(matches(\"studs|profs\"), ~mean(.x), .names = \"m_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni  m_studs m_profs\n1 19173   322 1971       TRUE         Uni Bremen 21690.62  328.25\n2  5333    67 1830       TRUE         Uni Vechta 21690.62  328.25\n3 15643   210 1973       TRUE      Uni Oldenburg 21690.62  328.25\n4 14954   250 1971      FALSE          FH Aachen 21690.62  328.25\n5 47269   553 1870       TRUE        RWTH Aachen 21690.62  328.25\n6 23659   438 1457       TRUE       Uni Freiburg 21690.62  328.25\n7  9415   150 1818       TRUE           Uni Bonn 21690.62  328.25\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg 21690.62  328.25\n```\n:::\n:::\n\n\n[Mehr Beispiele in der Hilfe zu across](https://dplyr.tidyverse.org/reference/across.html)\n\n\n### [Übung](#across_ue) {#ue06_3}\n\n## Eigene Funktionen \n\nWoher kommt aber die `~`[^tilde] in `across()`?\nDazu sehen wir uns einmal die Grundlagen von Funktionen in R an. \n\n[^tilde]: \"Tilde\" - Tastaturbefehle: `Alt Gr` + `*` auf Windows. Auf macOS `Alt` + `N` und anschließend ein Leerzeichen, damit die Tilde erscheint.\n\nDazu sehen wir uns drei Zufriedensheitsvariablen für die Befragten aus den Zeilen 12-16 an:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"fnmaerniwl\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#fnmaerniwl .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#fnmaerniwl .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#fnmaerniwl .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#fnmaerniwl .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#fnmaerniwl .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#fnmaerniwl .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#fnmaerniwl .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#fnmaerniwl .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#fnmaerniwl .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#fnmaerniwl .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#fnmaerniwl .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#fnmaerniwl .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#fnmaerniwl .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#fnmaerniwl .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fnmaerniwl .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#fnmaerniwl .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#fnmaerniwl .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fnmaerniwl .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#fnmaerniwl .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fnmaerniwl .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#fnmaerniwl .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fnmaerniwl .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#fnmaerniwl .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fnmaerniwl .gt_left {\n  text-align: left;\n}\n\n#fnmaerniwl .gt_center {\n  text-align: center;\n}\n\n#fnmaerniwl .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#fnmaerniwl .gt_font_normal {\n  font-weight: normal;\n}\n\n#fnmaerniwl .gt_font_bold {\n  font-weight: bold;\n}\n\n#fnmaerniwl .gt_font_italic {\n  font-style: italic;\n}\n\n#fnmaerniwl .gt_super {\n  font-size: 65%;\n}\n\n#fnmaerniwl .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#fnmaerniwl .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#fnmaerniwl .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#fnmaerniwl .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#fnmaerniwl .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#fnmaerniwl .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#fnmaerniwl .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"var\">var</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".\">.</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"1\">1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"2\">2</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"3\">3</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"4\">4</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"7/8/9\">7/8/9</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_04</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit dem Betriebsklima?</td>\n<td headers=\"1\" class=\"gt_row gt_left\">sehr zufrieden</td>\n<td headers=\"2\" class=\"gt_row gt_left\">zufrieden</td>\n<td headers=\"3\" class=\"gt_row gt_left\">weniger zufrieden</td>\n<td headers=\"4\" class=\"gt_row gt_left\">nicht zufrieden</td>\n<td headers=\"7/8/9\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_05</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit Ihrem direkten Vorgesetzen?</td>\n<td headers=\"1\" class=\"gt_row gt_left\">sehr zufrieden</td>\n<td headers=\"2\" class=\"gt_row gt_left\">zufrieden</td>\n<td headers=\"3\" class=\"gt_row gt_left\">weniger zufrieden</td>\n<td headers=\"4\" class=\"gt_row gt_left\">nicht zufrieden</td>\n<td headers=\"7/8/9\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_06</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit Art und Inhalt der Tätigkeit?</td>\n<td headers=\"1\" class=\"gt_row gt_left\">sehr zufrieden</td>\n<td headers=\"2\" class=\"gt_row gt_left\">zufrieden</td>\n<td headers=\"3\" class=\"gt_row gt_left\">weniger zufrieden</td>\n<td headers=\"4\" class=\"gt_row gt_left\">nicht zufrieden</td>\n<td headers=\"7/8/9\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\")\n\nsat_small <- \n  etb18 %>% \n    select(F1450_04,F1450_05,F1450_06) %>% \n    slice(12:16) %>% \n    haven::zap_labels() %>% haven::zap_label() # labels entfernen\nsat_small\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  F1450_04 F1450_05 F1450_06\n     <dbl>    <dbl>    <dbl>\n1        3        3        2\n2        2        2        1\n3        2        2        1\n4        2        2        2\n5        1        2        2\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nHäufig wollen wir mehrere Variablen mit der gleichen Operation bearbeiten. \nOben haben wir gesehen wie sich das mit [`across()`](#across) für existierende Funktionen erledigen lässt. \nWas aber, wenn wir eine Berechnung durchführen wollen, die nicht einfach die Anwendung von `mean()`, `sd()` o.ä. ist?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% \n  mutate(dmean_F1450_04 = F1450_04 - mean(F1450_04,na.rm = T),\n         dmean_F1450_05 = F1450_05 - mean(F1450_05,na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n  F1450_04 F1450_05 F1450_06 dmean_F1450_04 dmean_F1450_05\n     <dbl>    <dbl>    <dbl>          <dbl>          <dbl>\n1        3        3        2              1          0.8  \n2        2        2        1              0         -0.200\n3        2        2        1              0         -0.200\n4        2        2        2              0         -0.200\n5        1        2        2             -1         -0.200\n```\n:::\n:::\n\n\n...und jetzt noch `F1450_06`?\nDann hätten wir drei Mal das mehr oder weniger gleiche getippt und damit gegen das \"DRY\"-Prinzip[^dry] verstoßen. Außerdem gibt es in der ETB 2018 insgesamt 10 Spalten mit ähnlichen Zufriedenheitsvariablen. Wenn wir die alle bearbeiten möchten, ist copy & paste keine echte Option.\n\n[^dry]: Do not repeat yourself, siehe [Wickham et al](https://r4ds.had.co.nz/functions.html): \"You should consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).\"\n\nEigene Funktionen helfen uns, das DRY-Prinzip in R umzusetzen.\nWir machen die Berechnungsschritte Teil einer `function()` und wenden diese dann auf die gewünschten Variablen an.\nEine Funktion hat einen Input, für welchen ein Platzhalter in der `()` definiert wird. \nDieser Platzhalter kann dann innerhalb der Funktion - zwischen den `{}` - aufgerufen und bearbeitet werden.\nAls Ergebnis erhalten wir das Objekt, das wir in `return()` angeben. `return()` muss immer als letztes angeben werden und wir können immer nur *ein* Objekt als Output definieren:\n\n::: {.cell}\n\n```{.r .cell-code}\ndtomean <- function(x){\n  d_x <- x - mean(x,na.rm = T)\n  return(d_x)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar1 <- c(1,6,3,7,8,1,5)\nmean(var1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.428571\n```\n:::\n\n```{.r .cell-code}\ndtomean(var1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -3.4285714  1.5714286 -1.4285714  2.5714286  3.5714286 -3.4285714  0.5714286\n```\n:::\n:::\n\n\nWie können wir unsere Funktion `dtomean()` jetzt auf die Variablen aus unserem `sat_small` anwenden? \nGrundsätzlich haben wir ganz [zu Beginn](#02_intro)  gesehen, dass ein `data.frame` lediglich zusammengefügte Sammlung von Vektoren (den Variablen) ist. \nDementsprechend können wir jetzt unsere `dtomean()` auf eine Variable (einen Vektor) anwenden, indem wir ihn mit `data.frame$variablename` aufrufen:\n\n::: {.cell}\n\n```{.r .cell-code}\ndtomean(sat_small$F1450_04)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  0  0  0 -1\n```\n:::\n:::\n\n\nUm unsere Funktion jetzt auf jede Variable eines `data.frame` anzuwenden, können wir `map()` aus `{purrr}` (ebenfalls Teil des `{tidyverse}`) verwenden - der Output ist dann eine Liste, deren Elemente nach den Variablennamen benannt werden:\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% map(.f = ~dtomean(.x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$F1450_04\n[1]  1  0  0  0 -1\n\n$F1450_05\n[1]  0.8 -0.2 -0.2 -0.2 -0.2\n\n$F1450_06\n[1]  0.4 -0.6 -0.6  0.4  0.4\n```\n:::\n:::\n\n\nMit `bind_cols()` können wir die Liste spaltenweise zusammenfügen:\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% map(~dtomean(.x)) %>% bind_cols() # formula syntax-Schreibweise\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  F1450_04 F1450_05 F1450_06\n     <dbl>    <dbl>    <dbl>\n1        1    0.8        0.4\n2        0   -0.200     -0.6\n3        0   -0.200     -0.6\n4        0   -0.200      0.4\n5       -1   -0.200      0.4\n```\n:::\n:::\n\nDiese *formula syntax* Schreibweise findet sich dann auch in `across()` wieder - zusätzlich haben wir hier direkt über `.names =` die Möglichkeit, die Variablennamen für die Ergebnisse zu bearbeiten:\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% \n  mutate(across(matches(\"F1450\"),~dtomean(.x),.names = \"dmean_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  F1450_04 F1450_05 F1450_06 dmean_F1450_04 dmean_F1450_05 dmean_F1450_06\n     <dbl>    <dbl>    <dbl>          <dbl>          <dbl>          <dbl>\n1        3        3        2              1          0.8              0.4\n2        2        2        1              0         -0.200           -0.6\n3        2        2        1              0         -0.200           -0.6\n4        2        2        2              0         -0.200            0.4\n5        1        2        2             -1         -0.200            0.4\n```\n:::\n:::\n\n\n<!-- ::: callout-tip -->\n\n<!-- + Wir können Funktionen auch für andere Zwecke verwenden als Variablen zu bearbeiten. Bspw. können wir mit Funktionen eine Reihe an Datensätzen einlesen und direkt den gleichen Bearbeitungsschritten unterziehen, Modellserien oder Grafikserien erstellen usw. - etwas mehr dazu in [Kapitel ](#12_apply_loop). Weiterführende Beispiele [hier](#purrr)  -->\n\n<!-- + [Die 'formula syntax' Schreibweise  mit `~.x` wird zunehmend durch anonyme Funktionen `\\(x) fun(x)` abgelöst - wird aber auf absehbare Zeit der Standard bleiben.](#anonymfun) -->\n\n<!-- ::: -->\n\n### [Übung](#fnct) {#ue06_4}\n\n\n<!-- ```{r} -->\n<!-- mode <- function(x) { -->\n<!--   names(which.max(table(x)))  -->\n<!-- } -->\n\n<!-- mode(etb18$m1202) -->\n<!-- ``` -->\n\n\n\n## Hilfsfunktionen `ifelse()` und `case_when()`\n\n`ifelse()` ist eine große Hilfe für alle Umcodierungen: wir formulieren darin eine Bedingung und wenn diese zutrifft wird der erste Wert eingesetzt, wenn nicht wird der zweite Wert eingesetzt. Hier fragen wir also ab, ob `studs-mean(studs)` größer `0` ist - dann wird `darüber` eingesetzt, ansonsten eine `darunter`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(rel_to_mean = studs-mean(studs),\n                ab_mean_lab = ifelse(rel_to_mean > 0,\"darüber\",\"darunter\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni rel_to_mean ab_mean_lab\n1 19173   322 1971       TRUE         Uni Bremen   -2517.625    darunter\n2  5333    67 1830       TRUE         Uni Vechta  -16357.625    darunter\n3 15643   210 1973       TRUE      Uni Oldenburg   -6047.625    darunter\n4 14954   250 1971      FALSE          FH Aachen   -6736.625    darunter\n5 47269   553 1870       TRUE        RWTH Aachen   25578.375     darüber\n6 23659   438 1457       TRUE       Uni Freiburg    1968.375     darüber\n7  9415   150 1818       TRUE           Uni Bonn  -12275.625    darunter\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg   16388.375     darüber\n```\n:::\n:::\n\n\n`case_when()` (`{dplyr}`) erweitert dieses Prinzip, sodass wir mehr als zwei Optionen angeben können. \nDie Syntax ist aber etwas anders: hier geben wir erst die Bedingung an, dann nach einer `~`[^tilde] die einzusetzenden Werte: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(alter = case_when(gegr < 1500 ~ \"sehr alt\",\n                                  gegr < 1900 ~ \"alt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni    alter\n1 19173   322 1971       TRUE         Uni Bremen     <NA>\n2  5333    67 1830       TRUE         Uni Vechta      alt\n3 15643   210 1973       TRUE      Uni Oldenburg     <NA>\n4 14954   250 1971      FALSE          FH Aachen     <NA>\n5 47269   553 1870       TRUE        RWTH Aachen      alt\n6 23659   438 1457       TRUE       Uni Freiburg sehr alt\n7  9415   150 1818       TRUE           Uni Bonn      alt\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     <NA>\n```\n:::\n:::\n\n\nMit `TRUE` können alle Fälle angesprochen werden, die bis dahin keiner Bedingung entsprochen haben:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(alter = case_when(gegr < 1500 ~ \"sehr alt\",\n                                  gegr < 1900 ~ \"alt\",\n                                  TRUE ~ \"relativ neu\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni       alter\n1 19173   322 1971       TRUE         Uni Bremen relativ neu\n2  5333    67 1830       TRUE         Uni Vechta         alt\n3 15643   210 1973       TRUE      Uni Oldenburg relativ neu\n4 14954   250 1971      FALSE          FH Aachen relativ neu\n5 47269   553 1870       TRUE        RWTH Aachen         alt\n6 23659   438 1457       TRUE       Uni Freiburg    sehr alt\n7  9415   150 1818       TRUE           Uni Bonn         alt\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg relativ neu\n```\n:::\n:::\n\n\n\nDas muss sich nicht auf eine Variable beschränken:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(alter = case_when(gegr < 1500 & prom_recht == T ~ \"sehr alte Uni\",\n                                  gegr < 1900 & prom_recht == T ~ \"alte Uni\",\n                                  gegr > 1900 & prom_recht == T ~ \"junge Uni\",\n                                  gegr < 1900 & prom_recht == F ~ \"alte Hochschule\",\n                                  gegr > 1900 & prom_recht == F ~ \"junge Hochschule\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni            alter\n1 19173   322 1971       TRUE         Uni Bremen        junge Uni\n2  5333    67 1830       TRUE         Uni Vechta         alte Uni\n3 15643   210 1973       TRUE      Uni Oldenburg        junge Uni\n4 14954   250 1971      FALSE          FH Aachen junge Hochschule\n5 47269   553 1870       TRUE        RWTH Aachen         alte Uni\n6 23659   438 1457       TRUE       Uni Freiburg    sehr alte Uni\n7  9415   150 1818       TRUE           Uni Bonn         alte Uni\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg junge Hochschule\n```\n:::\n:::\n\n\n<!-- [{janitor}](https://appsilon.com/data-cleaning-in-r/) -->\n\n<!-- `case_when()` kann aber auch außerhalb von `mutate()` mit der base-Version verwendet werden, dafür müssen aber alle Variablen mit `datensatz$` angewählt werden: -->\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- case_when(dat3$gegr < 1500 & dat3$prom_recht == T ~ \"sehr alte Uni\", -->\n<!--           dat3$gegr < 1900 & dat3$prom_recht == T ~ \"alte Uni\", -->\n<!--           dat3$gegr > 1900 & dat3$prom_recht == T ~ \"junge Uni\", -->\n<!--           dat3$gegr < 1900 & dat3$prom_recht == F ~ \"alte Hochschule\", -->\n<!--           dat3$gegr > 1900 & dat3$prom_recht == F ~ \"junge Hochschule\") -->\n<!-- ``` -->\n\n\n### [Übung](#ifcase) {#ue06_5}\n\n## Variablen umbenennen\n\n\nUm Variablen umzubenennen gibt es `rename(neuer_name = alter_name)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% rename(neu=F1450_04)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n    neu F1450_05 F1450_06\n  <dbl>    <dbl>    <dbl>\n1     3        3        2\n2     2        2        1\n3     2        2        1\n4     2        2        2\n5     1        2        2\n```\n:::\n:::\n\n\nFür fortgeschrittene Veränderungen empfiehlt sich ein Blick in `rename_with()`. Damit können wir [Regular Expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf), bspw. aus [{stringr}](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf) verwenden. Hier nur ein Beispiel:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% rename_with(~tolower(.))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  f1450_04 f1450_05 f1450_06\n     <dbl>    <dbl>    <dbl>\n1        3        3        2\n2        2        2        1\n3        2        2        1\n4        2        2        2\n5        1        2        2\n```\n:::\n\n```{.r .cell-code}\nsat_small %>% rename_with(~str_remove(.x,\"1450_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n    F04   F05   F06\n  <dbl> <dbl> <dbl>\n1     3     3     2\n2     2     2     1\n3     2     2     1\n4     2     2     2\n5     1     2     2\n```\n:::\n:::\n\n\n\n\n<!-- ## `lapply()` und `map()` -->\n\n\n<!-- [`across()` und `c_across()`](https://twitter.com/tmfmnk/status/1525840447419162625) -->\n\n<!-- https://mgimond.github.io/ES218/Week03ab_groupby.html -->\n<!-- https://datacarpentry.org/r-socialsci/ -->\n<!-- data science in a box -->\n<!-- https://medium.com/@tomazkastrun/eight-r-tidyverse-tips-for-everyday-data-engineering-8474f3d4af4f -->\n\n<!-- https://medium.com/@alwinw/are-r-loops-really-that-slow-1bbf46b21fcb -->\n\n<!-- ## across & select -->\n<!-- https://gist.github.com/AlbertRapp/043c7941d0fa6478cbea55f45525befe -->\n\n\n## Übungen\n\n### Übung {#mutate1}\n\n\n+ Erstellen Sie `dat3` wie [oben gezeigt](#var) aus `dat1` und `dat2`\n+ Berechnen Sie das Betreuungsverhältnis (Studierende pro Professur `studs/profs`) an den Hochschulen relativ zum Mittelwert des Betreuungsverhältnisses (`rel_studprofs`). \n+ Liegt das Betreuungsverhältnis über oder unter dem Mittelwert? Wie können Sie den Befehl anpassen, sodass die Variable `rel_studprofs` lediglich `TRUE` oder `FALSE` enthält anstelle der Zahlenwerte.\n+ Wandeln Sie `rel_studprofs` in eine Dummy-Variable mit 0/1 als Werten statt `TRUE`/`FALSE`\n\n::: callout-tip\n\nDaumenregel zur Entscheidung, ob `mutate()` oder `...$newvar <-` besser passt: Immer wenn es nur darum geht, schnell eine Variable zu erstellen/löschen, ist `...$newvar <-` die einfachere Wahl. Sobald es darüber hinaus geht, hat `mutate()` sehr große Vorteile ([folgender Abschnitt](#group_by)).\n\n:::\n\n[Zurück nach oben](#ue06_1)\n\n\n### Übung {#grp_ue}\n\n+ Verwenden Sie weiterhin den Uni-Datensatz.\n+ Berechnen Sie das Betreuungsverhältnis (`studprofs`) relativ zum Mittelwert getrennt für Hochschulen/Unis mit und ohne Promotionsrecht und fügen Sie dieses als neue Spalte ein.\n+ Testen Sie sowohl die Variante mit `group_by()` als auch `.by =`.\n\n[Zurück nach oben](#ue06_2)\n\n<!-- studs/profs berechnen -> über oder unter dem Schnitt?   -->\n<!-- + studs/profs berechnen -> über oder unter dem Schnitt LABELN -->\n<!-- + gruppiert nach `prom_recht` -->\n  \n  \n### Übung {#across_ue}\n\n+ Verwenden Sie den `etb18_small`-Datensatz:\n\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_small <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                               n_max = 10, # nur 10 Zeilen\n                               col_select = c(\"zpalter\",\"S1\",\"F1450_01\",\"F1450_02\",\"F1450_03\")\n                               )\n```\n:::\n\n\n+ Berechnen Sie den Mittelwert für die Variablen F1450_01, F1450_02, und F1450_03:\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"kegrxgqtlp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#kegrxgqtlp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#kegrxgqtlp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#kegrxgqtlp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#kegrxgqtlp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#kegrxgqtlp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#kegrxgqtlp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#kegrxgqtlp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#kegrxgqtlp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#kegrxgqtlp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#kegrxgqtlp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#kegrxgqtlp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#kegrxgqtlp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#kegrxgqtlp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#kegrxgqtlp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kegrxgqtlp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#kegrxgqtlp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#kegrxgqtlp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kegrxgqtlp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#kegrxgqtlp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kegrxgqtlp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#kegrxgqtlp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kegrxgqtlp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kegrxgqtlp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kegrxgqtlp .gt_left {\n  text-align: left;\n}\n\n#kegrxgqtlp .gt_center {\n  text-align: center;\n}\n\n#kegrxgqtlp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#kegrxgqtlp .gt_font_normal {\n  font-weight: normal;\n}\n\n#kegrxgqtlp .gt_font_bold {\n  font-weight: bold;\n}\n\n#kegrxgqtlp .gt_font_italic {\n  font-style: italic;\n}\n\n#kegrxgqtlp .gt_super {\n  font-size: 65%;\n}\n\n#kegrxgqtlp .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#kegrxgqtlp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#kegrxgqtlp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#kegrxgqtlp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#kegrxgqtlp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#kegrxgqtlp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#kegrxgqtlp .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"var\">var</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".\">.</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_01</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit dem Einkommen aus dieser Tätigkeit?</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_02</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit den derzeitigen Aufstiegsmöglichkeiten?</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_03</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit Ihrer derzeitigen Arbeitszeit?</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   zpalter S1 F1450_01 F1450_02 F1450_03\n1       41  1        2       NA        3\n2       51  2        4        4        2\n3       49  1        2        4        2\n4       63  2        2        2        2\n5       41  2        2        2        2\n6       57  1        1        2        4\n7       62  1        2       NA        2\n8       59  2        3        7        2\n9       32  2        3        3        3\n10      62  2        2        2        1\n```\n:::\n:::\n\n\n+ Verwenden Sie `across()` und denken Sie ggf. daran, dass Sie `NA`s die `na.rm = T` in `mean()` setzen müssen: `mean(....,na.rm = T)`\n+ Berechnen Sie die Mittelwerte getrennt nach Geschlecht, indem Sie `group_by()` oder `.by =` verwenden.\n+ Fügen Sie auch die Varianz (`var()`) hinzu und nutzen sie `.names=`, um die Spaltennamen nach dem Schema `kennzahl.variable` zu benennen.\n\n\n[Zurück nach oben](#ue06_3)\n\n\n### Übung {#fnct}\n\nVerwenden Sie `etb18_small3`:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_small3 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                       col_select = c(\"zpalter\",\"S1\",\"F1450_01\",\"F1450_02\",\"F1450_03\"))\netb18_small3 <- etb18_small3 %>% slice(5654:5666)\netb18_small3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 5\n   zpalter   S1           F1450_01              F1450_02               F1450_03 \n   <dbl+lbl> <dbl+lbl>    <dbl+lbl>             <dbl+lbl>              <dbl+lbl>\n 1 54        2 [weiblich] 9 [keine Angabe]       4 [nicht zufrieden]   4 [nicht…\n 2 60        2 [weiblich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 3 63        1 [männlich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 4 49        2 [weiblich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 5 62        2 [weiblich] 1 [sehr zufrieden]     7 [Es gibt keine]     2 [zufri…\n 6 52        1 [männlich] 1 [sehr zufrieden]    NA                     1 [sehr …\n 7 59        1 [männlich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 8 59        1 [männlich] 1 [sehr zufrieden]    NA                     1 [sehr …\n 9 33        1 [männlich] 2 [zufrieden]         NA                     2 [zufri…\n10 41        2 [weiblich] 2 [zufrieden]          7 [Es gibt keine]     9 [keine…\n11 50        2 [weiblich] 2 [zufrieden]          7 [Es gibt keine]     1 [sehr …\n12 42        2 [weiblich] 3 [weniger zufrieden]  3 [weniger zufrieden] 3 [wenig…\n13 28        2 [weiblich] 9 [keine Angabe]       2 [zufrieden]         2 [zufri…\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   zpalter S1 F1450_01 F1450_02 F1450_03\n1       54  2        9        4        4\n2       60  2        2        2        2\n3       63  1        2        2        2\n4       49  2        2        2        2\n5       62  2        1        7        2\n6       52  1        1       NA        1\n7       59  1        2        2        2\n8       59  1        1       NA        1\n9       33  1        2       NA        2\n10      41  2        2        7        9\n11      50  2        2        7        1\n12      42  2        3        3        3\n13      28  2        9        2        2\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"aplfkcphan\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#aplfkcphan .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#aplfkcphan .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#aplfkcphan .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#aplfkcphan .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#aplfkcphan .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#aplfkcphan .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#aplfkcphan .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#aplfkcphan .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#aplfkcphan .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#aplfkcphan .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#aplfkcphan .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#aplfkcphan .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#aplfkcphan .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#aplfkcphan .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aplfkcphan .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#aplfkcphan .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#aplfkcphan .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aplfkcphan .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#aplfkcphan .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aplfkcphan .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#aplfkcphan .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aplfkcphan .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#aplfkcphan .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#aplfkcphan .gt_left {\n  text-align: left;\n}\n\n#aplfkcphan .gt_center {\n  text-align: center;\n}\n\n#aplfkcphan .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#aplfkcphan .gt_font_normal {\n  font-weight: normal;\n}\n\n#aplfkcphan .gt_font_bold {\n  font-weight: bold;\n}\n\n#aplfkcphan .gt_font_italic {\n  font-style: italic;\n}\n\n#aplfkcphan .gt_super {\n  font-size: 65%;\n}\n\n#aplfkcphan .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#aplfkcphan .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#aplfkcphan .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#aplfkcphan .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#aplfkcphan .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#aplfkcphan .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#aplfkcphan .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"var\">var</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".\">.</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"1\">1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"2\">2</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"3\">3</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"4\">4</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"7/8/9\">7/8/9</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_01</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit dem Einkommen aus dieser Tätigkeit?</td>\n<td headers=\"1\" class=\"gt_row gt_left\">sehr zufrieden</td>\n<td headers=\"2\" class=\"gt_row gt_left\">zufrieden</td>\n<td headers=\"3\" class=\"gt_row gt_left\">weniger zufrieden</td>\n<td headers=\"4\" class=\"gt_row gt_left\">nicht zufrieden</td>\n<td headers=\"7/8/9\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_02</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit den derzeitigen Aufstiegsmöglichkeiten?</td>\n<td headers=\"1\" class=\"gt_row gt_left\">sehr zufrieden</td>\n<td headers=\"2\" class=\"gt_row gt_left\">zufrieden</td>\n<td headers=\"3\" class=\"gt_row gt_left\">weniger zufrieden</td>\n<td headers=\"4\" class=\"gt_row gt_left\">nicht zufrieden</td>\n<td headers=\"7/8/9\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_left\" style=\"font-family: Roboto;\">F1450_03</td>\n<td headers=\".\" class=\"gt_row gt_left\">Wie zufrieden sind Sie mit Ihrer derzeitigen Arbeitszeit?</td>\n<td headers=\"1\" class=\"gt_row gt_left\">sehr zufrieden</td>\n<td headers=\"2\" class=\"gt_row gt_left\">zufrieden</td>\n<td headers=\"3\" class=\"gt_row gt_left\">weniger zufrieden</td>\n<td headers=\"4\" class=\"gt_row gt_left\">nicht zufrieden</td>\n<td headers=\"7/8/9\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n\n\n+ Standardisieren Sie die Variablen F1450_01 - F1450_03 aus `etb_small2` nach folgendem Muster:\n\n::: {.cell}\n\n```{.r .cell-code}\netb_small2 %>% \n  mutate(std_F1450_01 = (F1450_01 - mean(F1450_01,na.rm = T))/sd(F1450_01,na.rm = T))\n```\n:::\n\n+ Nutzen Sie eine Funktion, um nicht wiederholt die gleichen Schritte einzugeben.\n+ Verwenden Sie zusätzlich `across()`, um die Funktion auf die gewünschten Variablen anzuwenden.\n+ Benennen Sie `S1` in `etb_small2` um \n\n\n[Zurück nach oben](#ue06_4)\n\n\n### Übung {#ifcase}\n\n+ Bearbeiten Sie `etb18_small`:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_small2 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                         col_select = c(\"zpalter\",\"S1\",\"F1450_01\",\"F1450_02\",\"F1450_03\"))\netb18_small2 <- etb18_small2 %>% slice(5654:5666)\netb18_small2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 5\n   zpalter   S1           F1450_01              F1450_02               F1450_03 \n   <dbl+lbl> <dbl+lbl>    <dbl+lbl>             <dbl+lbl>              <dbl+lbl>\n 1 54        2 [weiblich] 9 [keine Angabe]       4 [nicht zufrieden]   4 [nicht…\n 2 60        2 [weiblich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 3 63        1 [männlich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 4 49        2 [weiblich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 5 62        2 [weiblich] 1 [sehr zufrieden]     7 [Es gibt keine]     2 [zufri…\n 6 52        1 [männlich] 1 [sehr zufrieden]    NA                     1 [sehr …\n 7 59        1 [männlich] 2 [zufrieden]          2 [zufrieden]         2 [zufri…\n 8 59        1 [männlich] 1 [sehr zufrieden]    NA                     1 [sehr …\n 9 33        1 [männlich] 2 [zufrieden]         NA                     2 [zufri…\n10 41        2 [weiblich] 2 [zufrieden]          7 [Es gibt keine]     9 [keine…\n11 50        2 [weiblich] 2 [zufrieden]          7 [Es gibt keine]     1 [sehr …\n12 42        2 [weiblich] 3 [weniger zufrieden]  3 [weniger zufrieden] 3 [wenig…\n13 28        2 [weiblich] 9 [keine Angabe]       2 [zufrieden]         2 [zufri…\n```\n:::\n:::\n\n\n\n+ Nutzen Sie `ifelse()`, um Personen ab 50 Jahren mit \"ü50\" zu kennzeichnen - lassen Sie für Personen bis unter 50 Jahren \"u50\" eintragen.\n+ Führen Sie eine Dreiteilung durch: Personen bis 40 bekommen \"u40\", Personen bis einschließlich 50 \"u50\" und Personen über 50 Jahren \"ü50\". Wie würden Sie mit `case_when()` vorgehen?\n+ Nutzen Sie `ifelse()`, um Werte > 4 in den Variablen `F1450_01`, `F1450_02`, und `F1450_03` in `etb18_small2` mit `NA` zu überschreiben.\n+ Schreiben Sie zunächst eine `ifelse()`-Funktion, die für `F1450_01` alle Werte > 4 mit `NA` überschreibt und ansonsten den Ausgangswert `F1450_01` einsetzt.\n+ Wie würde die Funktion aussehen, wenn Sie sie mit `across()` auf `F1450_01`, `F1450_02` und `F1450_03` gleichzeitig anwenden?\n\n[Zurück nach oben](#ue06_5)\n\n\n## Anhang\n\n### Klassen bilden mit `cut()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n:::\n:::\n\n\nEine häufig Aufgabe in der Datenaufbereitung die Klassierung eines metrisches Merkmals, wie zum Beispiel die Professorenzahlen.\nWir möchten also `profs` in 150er-Schritten zusammenfassen.\nUm die Klassen zu bilden, nutzen wir `cut()` und geben neben der zu unterteilenden Variable mit `breaks` die Klassengrenzen an. Für die Grenzen können wir `seq()` verwenden. \nDarin geben wir zunächst die obere und untere Grenze an und dann die Schrittbreiten. \n\n::: {.cell}\n\n```{.r .cell-code}\ncut(dat3$profs,breaks = c(50, 200, 350, 500, 650))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] (200,350] (50,200]  (200,350] (200,350] (500,650] (350,500] (50,200] \n[8] (500,650]\nLevels: (50,200] (200,350] (350,500] (500,650]\n```\n:::\n\n```{.r .cell-code}\ncut(dat3$profs,breaks = seq(50,650,150))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] (200,350] (50,200]  (200,350] (200,350] (500,650] (350,500] (50,200] \n[8] (500,650]\nLevels: (50,200] (200,350] (350,500] (500,650]\n```\n:::\n:::\n\n\n\nDiese Werte legen wir in einer neuen Variable im Datensatz `dat3` ab: \n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$prof_class <- cut(dat3$profs,breaks = seq(50,650,150))\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni prof_class\n1 19173   322 1971       TRUE         Uni Bremen  (200,350]\n2  5333    67 1830       TRUE         Uni Vechta   (50,200]\n3 15643   210 1973       TRUE      Uni Oldenburg  (200,350]\n4 14954   250 1971      FALSE          FH Aachen  (200,350]\n5 47269   553 1870       TRUE        RWTH Aachen  (500,650]\n6 23659   438 1457       TRUE       Uni Freiburg  (350,500]\n7  9415   150 1818       TRUE           Uni Bonn   (50,200]\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg  (500,650]\n```\n:::\n:::\n\nFür diese neue Variable können wir mit `count()` eine Häufigkeitstabelle anfordern:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% count(prof_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  prof_class n\n1   (50,200] 2\n2  (200,350] 3\n3  (350,500] 1\n4  (500,650] 2\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n`(` bedeutet dabei ausgeschlossen, `]` inklusive. Es gibt also 3 Unis im Datensatz, die über 200 bis inklusive 350 Professuren unterhalten.\n\n\nFür die weiteren Beispiele löschen wir die `prof_class` wieder:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$prof_class <- NULL\n```\n:::\n\n\n**Einige hilfreiche Optionen für `cut()` im Anhang**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp <- c(1990,1998,2001,2009)\nbsp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1990 1998 2001 2009\n```\n:::\n\n```{.r .cell-code}\ncut(bsp,breaks = c(1990,2000,2010)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] <NA>             (1.99e+03,2e+03] (2e+03,2.01e+03] (2e+03,2.01e+03]\nLevels: (1.99e+03,2e+03] (2e+03,2.01e+03]\n```\n:::\n\n```{.r .cell-code}\n# Anzahl der stellen in den labels\ncut(bsp,breaks = c(1990,2000,2010),dig.lab = 4) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] <NA>        (1990,2000] (2000,2010] (2000,2010]\nLevels: (1990,2000] (2000,2010]\n```\n:::\n\n```{.r .cell-code}\n# untere Grenze mit einbeziehen\ncut(bsp,breaks = c(1990,2000,2010),dig.lab = 4,include.lowest = T) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] [1990,2000] [1990,2000] (2000,2010] (2000,2010]\nLevels: [1990,2000] (2000,2010]\n```\n:::\n\n```{.r .cell-code}\n# durchnummerieren statt labels:\ncut(bsp,breaks = c(1990,2000,2010),labels = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA  1  2  2\n```\n:::\n\n```{.r .cell-code}\n# eigene labels angeben:\ncut(bsp,breaks = c(1990,2000,2010),labels = c(\"90er\",\"00er\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] <NA> 90er 00er 00er\nLevels: 90er 00er\n```\n:::\n:::\n\n\n\n### String-Funktionen für *regex*\n\n[{stringr}](https://stringr.tidyverse.org/) stellt eine ganze Reihe an sehr hilfreichen String-Funktionen mit [Regular Expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf) zur Verfügung, einen Überblick bietet das [Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(uni_fh = str_detect(uni,\"Uni\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni uni_fh\n1 19173   322 1971       TRUE         Uni Bremen   TRUE\n2  5333    67 1830       TRUE         Uni Vechta   TRUE\n3 15643   210 1973       TRUE      Uni Oldenburg   TRUE\n4 14954   250 1971      FALSE          FH Aachen  FALSE\n5 47269   553 1870       TRUE        RWTH Aachen  FALSE\n6 23659   438 1457       TRUE       Uni Freiburg   TRUE\n7  9415   150 1818       TRUE           Uni Bonn   TRUE\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg  FALSE\n```\n:::\n\n```{.r .cell-code}\ndat3 %>% mutate(bula = case_when(str_detect(uni,\"Bremen\")~ \"HB\",\n                                 str_detect(uni,\"Oldenb|Vechta\")~ \"NDS\",\n                                 str_detect(uni,\"Bonn|Aachen\")~ \"NRW\",\n                                 str_detect(uni,\"Freiburg\")~ \"BW\"\n                                 ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni bula\n1 19173   322 1971       TRUE         Uni Bremen   HB\n2  5333    67 1830       TRUE         Uni Vechta  NDS\n3 15643   210 1973       TRUE      Uni Oldenburg  NDS\n4 14954   250 1971      FALSE          FH Aachen  NRW\n5 47269   553 1870       TRUE        RWTH Aachen  NRW\n6 23659   438 1457       TRUE       Uni Freiburg   BW\n7  9415   150 1818       TRUE           Uni Bonn  NRW\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg  NRW\n```\n:::\n\n```{.r .cell-code}\ndat3 %>% mutate(ort = str_remove(uni,\"Uni |FH |RWTH \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studs profs gegr prom_recht                uni             ort\n1 19173   322 1971       TRUE         Uni Bremen          Bremen\n2  5333    67 1830       TRUE         Uni Vechta          Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg       Oldenburg\n4 14954   250 1971      FALSE          FH Aachen          Aachen\n5 47269   553 1870       TRUE        RWTH Aachen          Aachen\n6 23659   438 1457       TRUE       Uni Freiburg        Freiburg\n7  9415   150 1818       TRUE           Uni Bonn            Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg Bonn-Rhein-Sieg\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}