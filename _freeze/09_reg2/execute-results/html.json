{
  "hash": "46770b488b643f2088f1d46fb1b52cb6",
  "result": {
    "markdown": "# Regressionsmodelle: Erweiterungen\n\n\n\n\n\nNach den basics für Regressionsmodelle sehen wir uns in diesem Kapitel einige hilfreiche Erweiterungen von Regressionsmodellen in R an.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat1 <- data.frame(id   = 1:8,\n                   var1 = c(2,1,2,5,7, 8, 9,5),\n                   var2 = c(2,2,1,9,7, 4,25,3),\n                   educ = c(3,1,2,2,1, 3, 2,-1),\n                   gend = c(2,1,1,2,1,2,1,2),\n                   x    = c(2,1,2,4,1,NA,NA,NA) )\ndat1$ed_fct <- factor(dat1$educ, levels = 1:3,\n                        labels = c(\"basic\",\"medium\",\"high\"))\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct\n1  1    2    2    3    2  2   high\n2  2    1    2    1    1  1  basic\n3  3    2    1    2    1  2 medium\n4  4    5    9    2    2  4 medium\n5  5    7    7    1    1  1  basic\n6  6    8    4    3    2 NA   high\n7  7    9   25    2    1 NA medium\n8  8    5    3   -1    2 NA   <NA>\n```\n:::\n:::\n\n\n\n\n## Nur vollständige Zeilen behalten\n\nWenn wir die beiden Modelle `m1` und `m3` vergleichen, sehen wir unterschiedliche Fallzahlen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- lm(var2~ var1, data = dat1)  \nm4 <- lm(var2 ~ ed_fct  + var1, dat1)\nmodelsummary(list(\"m1\"=m1,\"m4\"=m4),gof_omit = \"IC|RM|Log|F\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> m1 </th>\n   <th style=\"text-align:center;\"> m4 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> −2.340 </td>\n   <td style=\"text-align:center;\"> −2.511 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (4.345) </td>\n   <td style=\"text-align:center;\"> (5.681) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> var1 </td>\n   <td style=\"text-align:center;\"> 1.839 </td>\n   <td style=\"text-align:center;\"> 1.753 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.773) </td>\n   <td style=\"text-align:center;\"> (0.835) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ed_fctmedium </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> 4.830 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> (6.038) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ed_fcthigh </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> −3.253 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (6.554) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 8 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.486 </td>\n   <td style=\"text-align:center;\"> 0.700 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nEs zeigt sich, dass in Modell `m4` mit `edu_fct` 1 Fall verloren geht. Woran liegt das?\nDazu lohnt sich ein Blick in die Daten:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct\n1  1    2    2    3    2  2   high\n2  2    1    2    1    1  1  basic\n3  3    2    1    2    1  2 medium\n4  4    5    9    2    2  4 medium\n5  5    7    7    1    1  1  basic\n6  6    8    4    3    2 NA   high\n7  7    9   25    2    1 NA medium\n8  8    5    3   -1    2 NA   <NA>\n```\n:::\n:::\n\n\nDie Angabe für `ed_fct` fehlt in für `id` = 8.\n\nUm die Modelle zu vergleichen sollten wir also nur die Zeilen verwenden, für die auch die Werte für `ed_fct` vorliegen.\nHier können wir diese Zeilen per Hand auswählen (und `id`=8 ausschließen), in größeren Datensätzen ist das aber mühsam.\n\n### `complete.cases()`\n\nHier hilft uns `complete.cases()`.\nDiese Funktion erstellt eine logische Variable, welche ein `TRUE` für alle vollständigen Fälle (also ohne ein `NA`). \nUnvollständige Fälle werden mit einem `FALSE` versehen. \nDazu geben wir an, welche Variablen jeweils für diese Betrachtung berücksichtigt werden sollen und legen die Variable einfach im Datensatz als neue Spalte an. \nFür Modell 1 ist ein Fall `complete`, wenn `var2` und `var1` vorliegen. \nWir wählen also mit `select()` die relevanten Variablen aus und wenden `complete.cases` auf diese Auswahl an:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% select(var1,var2) %>% complete.cases(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\ndat1$compl_m1 <- dat1 %>% select(var1,var2) %>% complete.cases(.) \ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct compl_m1\n1  1    2    2    3    2  2   high     TRUE\n2  2    1    2    1    1  1  basic     TRUE\n3  3    2    1    2    1  2 medium     TRUE\n4  4    5    9    2    2  4 medium     TRUE\n5  5    7    7    1    1  1  basic     TRUE\n6  6    8    4    3    2 NA   high     TRUE\n7  7    9   25    2    1 NA medium     TRUE\n8  8    5    3   -1    2 NA   <NA>     TRUE\n```\n:::\n:::\n\n::: {.callout-warning collapse=\"true\"}\n# `complete.cases()` alleine sucht in allen Variablen nach `NA`\nAchtung: wenn wir keine Variablen angeben, werden `NA` aus allen Variablen berücksichtigt, hier also auch die `NA` aus `x` - die uns hier nicht interessieren:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% complete.cases(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ndat1$compl <- dat1 %>% complete.cases(.) \ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct compl_m1 compl\n1  1    2    2    3    2  2   high     TRUE  TRUE\n2  2    1    2    1    1  1  basic     TRUE  TRUE\n3  3    2    1    2    1  2 medium     TRUE  TRUE\n4  4    5    9    2    2  4 medium     TRUE  TRUE\n5  5    7    7    1    1  1  basic     TRUE  TRUE\n6  6    8    4    3    2 NA   high     TRUE FALSE\n7  7    9   25    2    1 NA medium     TRUE FALSE\n8  8    5    3   -1    2 NA   <NA>     TRUE FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n:::\n\n...das gleiche machen wir für Modell `m4`, welches neben `var2` und `var1` ja auch noch `ed_fct` enthält:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$compl_m4 <- dat1 %>% select(var1,var2,ed_fct) %>% complete.cases(.)\n```\n:::\n\n\nSo sieht das dann im Datensatz aus:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct compl_m1 compl_m4\n1  1    2    2    3    2  2   high     TRUE     TRUE\n2  2    1    2    1    1  1  basic     TRUE     TRUE\n3  3    2    1    2    1  2 medium     TRUE     TRUE\n4  4    5    9    2    2  4 medium     TRUE     TRUE\n5  5    7    7    1    1  1  basic     TRUE     TRUE\n6  6    8    4    3    2 NA   high     TRUE     TRUE\n7  7    9   25    2    1 NA medium     TRUE     TRUE\n8  8    5    3   -1    2 NA   <NA>     TRUE    FALSE\n```\n:::\n:::\n\n\n\n\n\n### Fälle mit missings finden\nJetzt können wir nach diesen Variablen filtern und uns diese Fälle genauer ansehen. Dazu filtern wir nach den Fällen, die zwar in `m1` enthalten (also `compl_m1` = `TRUE`) sind, aber nicht in `m4` (`compl_m4` = `FALSE`):\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% filter(compl_m1 == T & compl_m4 == F) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct compl_m1 compl_m4\n1  8    5    3   -1    2 NA   <NA>     TRUE    FALSE\n```\n:::\n:::\n\n\n### Modelle nur mit vollständigen Fällen berechnen\nAußerdem können wir jetzt auch das Modell `m1` so erstellen, dass wir nur die Fälle miteinbeziehen, die auch in Modell2 berücksichtigt werden:\n\n::: {.cell}\n\n```{.r .cell-code}\nm1_m4vars <- lm(var2 ~ var1     , data = filter(dat1,compl_m4 == T))\nmodelsummary(list(\"m1\"=m1,\"m1 mit m4vars\"=m1_m4vars,\"m4\"=m4),gof_omit = \"IC|RM|Log|F\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> m1 </th>\n   <th style=\"text-align:center;\"> m1 mit m4vars </th>\n   <th style=\"text-align:center;\"> m4 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> −2.340 </td>\n   <td style=\"text-align:center;\"> −1.832 </td>\n   <td style=\"text-align:center;\"> −2.511 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (4.345) </td>\n   <td style=\"text-align:center;\"> (4.646) </td>\n   <td style=\"text-align:center;\"> (5.681) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> var1 </td>\n   <td style=\"text-align:center;\"> 1.839 </td>\n   <td style=\"text-align:center;\"> 1.848 </td>\n   <td style=\"text-align:center;\"> 1.753 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.773) </td>\n   <td style=\"text-align:center;\"> (0.814) </td>\n   <td style=\"text-align:center;\"> (0.835) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ed_fctmedium </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> 4.830 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> (6.038) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ed_fcthigh </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> −3.253 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (6.554) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 8 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.486 </td>\n   <td style=\"text-align:center;\"> 0.508 </td>\n   <td style=\"text-align:center;\"> 0.700 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n   <td style=\"text-align:center;\"> 0.409 </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nJetzt haben wir also in `m1 mit m4vars` und `m4` die gleiche Fallzahl und können so die Ergebnisse direkt miteinander vergleichen.\n\n## Interaktionen\n\nInteraktionen zwischen zwei Variablen können wir mit `*` berechnen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$g_fct <- factor(dat1$gend,levels = 1:2,\n                     labels = c(\"women\",\"men\"))\nm5 <- lm(var2 ~ var1 * g_fct, dat1)\nsummary(m5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1 * g_fct, data = dat1)\n\nResiduals:\n      1       2       3       4       5       6       7       8 \n-1.5000  2.6145 -0.8827  4.5000 -7.3687 -1.5000  5.6369 -1.5000 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)  \n(Intercept)    -3.1117     4.7702  -0.652   0.5498  \nvar1            2.4972     0.8211   3.041   0.0384 *\ng_fctmen        5.9451     8.4973   0.700   0.5227  \nvar1:g_fctmen  -2.1639     1.5331  -1.411   0.2310  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.493 on 4 degrees of freedom\nMultiple R-squared:  0.7244,\tAdjusted R-squared:  0.5177 \nF-statistic: 3.504 on 3 and 4 DF,  p-value: 0.1286\n```\n:::\n:::\n\n\nInteraktionen sollten immer visualisiert werden.\nDafür ist [`{ggeffects}`](https://strengejacke.github.io/ggeffects/index.html) eine große Hilfe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggeffects\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggeffects)\nggpredict(m5, terms = c(\"var1\",\"g_fct[women,men]\")) %>% plot()\n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-14-1.png){width=80% height=60%}\n:::\n\n```{.r .cell-code}\n# oder nebeneinander:\nggpredict(m5, terms = c(\"var1\",\"g_fct[women,men]\")) %>% plot(facet=TRUE)\n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-14-2.png){width=80% height=60%}\n:::\n:::\n\n\nWir können diese Darstellung mit den bekannten `{ggplot2}`-Befehlen verändern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpredict(m5, terms = c(\"var1\",\"g_fct[women,men]\")) %>% plot() + \n  scale_color_viridis_d(breaks = c(\"women\",\"men\"),labels=c(\"Frauen\",\"Männer\")) +\n  scale_fill_viridis_d(breaks = c(\"women\",\"men\"),labels=c(\"Frauen\",\"Männer\")) +\n  labs(title = \"Vorhergesagte Werte für var2\",\n       color = \"Gender\",\n       x = \"Werte für var1\",\n       y = \"Vorhergesagte Werte für var1\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-15-1.png){width=60% height=60%}\n:::\n:::\n\n\n## Quadratische Terme & Polynome\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm6 <- lm(var2 ~ var1 + I(var1^2), dat1 %>% filter(id != 7))\nsummary(m6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1 + I(var1^2), data = dat1 %>% filter(id != \n    7))\n\nResiduals:\n      1       2       3       4       5       6       7 \n-0.5443  1.4334 -1.5443  3.2043  1.2713 -1.0248 -2.7957 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  -1.8580     3.4066  -0.545    0.614\nvar1          2.6481     1.9083   1.388    0.238\nI(var1^2)    -0.2235     0.2110  -1.059    0.349\n\nResidual standard error: 2.524 on 4 degrees of freedom\nMultiple R-squared:  0.5099,\tAdjusted R-squared:  0.2648 \nF-statistic: 2.081 on 2 and 4 DF,  p-value: 0.2402\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggpredict(m6, terms = c(\"var1\")) %>% plot()\n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-18-1.png){width=60% height=60%}\n:::\n:::\n\n\n## Gewichtetes Regressionsmodell\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survey)\netb18 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\") \n\netb18x <- etb18 %>% filter(F518_SUF < 99998, zpalter < 100)\nmodx <- lm(F518_SUF ~ zpalter + I(zpalter^2),data=etb18x)\n\netb18_weighted <- svydesign(id      = ~intnr,\n                            weights = ~gew2018,\n                            data    = etb18x)\n# family = gaussian() bekommen wir ein lineares Regressionsmodell, wie bei lm() - mit gewichtet\nsurvey_modx <- svyglm(F518_SUF ~ zpalter + I(zpalter^2), \n                    family = gaussian(), data = etb18,design = etb18_weighted)\n\nmodelsummary(list(\"lm()\"=modx,\"svyglm()\"= survey_modx),gof_omit = \"RM|IC|Log\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> lm() </th>\n   <th style=\"text-align:center;\"> svyglm() </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> 586.343 </td>\n   <td style=\"text-align:center;\"> 118.307 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (381.240) </td>\n   <td style=\"text-align:center;\"> (338.854) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> zpalter </td>\n   <td style=\"text-align:center;\"> 110.543 </td>\n   <td style=\"text-align:center;\"> 121.639 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (17.556) </td>\n   <td style=\"text-align:center;\"> (17.635) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> I(zpalter^2) </td>\n   <td style=\"text-align:center;\"> −0.959 </td>\n   <td style=\"text-align:center;\"> −1.116 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.194) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.213) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 16543 </td>\n   <td style=\"text-align:center;\"> 16543 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.008 </td>\n   <td style=\"text-align:center;\"> 0.013 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.008 </td>\n   <td style=\"text-align:center;\"> 0.013 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:center;\"> 64.956 </td>\n   <td style=\"text-align:center;\"> 109.810 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n## Weitere Beispiele mit `starwars`\n\nDie folgenden Beispiele basieren vornehmlich auf dem `starwars`-Datensatz aus `{dplyr}`, hier ein kurzer Blick in die Daten:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% select(name,height,mass,hair_color,gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 5\n   name               height  mass hair_color    gender   \n   <chr>               <int> <dbl> <chr>         <chr>    \n 1 Luke Skywalker        172    77 blond         masculine\n 2 C-3PO                 167    75 <NA>          masculine\n 3 R2-D2                  96    32 <NA>          masculine\n 4 Darth Vader           202   136 none          masculine\n 5 Leia Organa           150    49 brown         feminine \n 6 Owen Lars             178   120 brown, grey   masculine\n 7 Beru Whitesun lars    165    75 brown         feminine \n 8 R5-D4                  97    32 <NA>          masculine\n 9 Biggs Darklighter     183    84 black         masculine\n10 Obi-Wan Kenobi        182    77 auburn, white masculine\n# … with 77 more rows\n```\n:::\n:::\n\n\nUnser Beispiel ist ein simples: der Zusammenhang zwischen Größe und Gewicht der Star Wars Helden:\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- lm(mass ~ height, data = starwars)\n```\n:::\n\n\n\n## \"Robuste\" Standardfehler\n\n\nHäufig müssen die Standardfehler an Verstöße gegen die allgemeinen Annahmen (Homoskedastizität usw.) angepasst werden.\n\nDie gute Nachricht ist, dass R eine ganze Reihe an Möglichkeiten bietet, Standard-Fehler zu korrigieren.\nUnter anderem mit [{sandwich}](http://sandwich.r-forge.r-project.org/articles/sandwich.html) oder [{estimatr}](https://declaredesign.org/r/estimatr/articles/getting-started.html).\n\nEine sehr einfache Variante ist die Korrektur von Standardfehlern in `{modelsummary}`, die wir uns etwas genauer ansehen:\n\n\nWir können sog. *heteroskedasticity-consistent* (HC) \"robuste\" Standardfehler mit der `vcov`-Option `HC` in `modelsummary()` anfordern. \nDie Hilfe-Seite für `{modelsummary}` bietet eine [Liste mit allen Optionen](https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html#vcov).\n\nEine Option ist auch `stata`, um Ergebnisse aus Statas `, robust` zu replizieren. \n[Hier mehr](https://declaredesign.org/r/estimatr/articles/stata-wls-hat.html) zu den Hintergründen und Unterschieden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modelsummary)\nmodelsummary(list(mod1,mod1,mod1,mod1),vcov = c(\"classical\",\"HC\",\"HC2\",\"stata\"),gof_omit = \"RM|IC|Log\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> Model 1 </th>\n   <th style=\"text-align:center;\"> Model 2 </th>\n   <th style=\"text-align:center;\"> Model 3 </th>\n   <th style=\"text-align:center;\"> Model 4 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> −13.810 </td>\n   <td style=\"text-align:center;\"> −13.810 </td>\n   <td style=\"text-align:center;\"> −13.810 </td>\n   <td style=\"text-align:center;\"> −13.810 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (111.155) </td>\n   <td style=\"text-align:center;\"> (22.963) </td>\n   <td style=\"text-align:center;\"> (23.456) </td>\n   <td style=\"text-align:center;\"> (23.362) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> height </td>\n   <td style=\"text-align:center;\"> 0.639 </td>\n   <td style=\"text-align:center;\"> 0.639 </td>\n   <td style=\"text-align:center;\"> 0.639 </td>\n   <td style=\"text-align:center;\"> 0.639 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.626) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.085) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.088) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.086) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 59 </td>\n   <td style=\"text-align:center;\"> 59 </td>\n   <td style=\"text-align:center;\"> 59 </td>\n   <td style=\"text-align:center;\"> 59 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.018 </td>\n   <td style=\"text-align:center;\"> 0.018 </td>\n   <td style=\"text-align:center;\"> 0.018 </td>\n   <td style=\"text-align:center;\"> 0.018 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.001 </td>\n   <td style=\"text-align:center;\"> 0.001 </td>\n   <td style=\"text-align:center;\"> 0.001 </td>\n   <td style=\"text-align:center;\"> 0.001 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:center;\"> 1.040 </td>\n   <td style=\"text-align:center;\"> 56.856 </td>\n   <td style=\"text-align:center;\"> 52.753 </td>\n   <td style=\"text-align:center;\"> 54.928 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Std.Errors </td>\n   <td style=\"text-align:center;\"> Classical </td>\n   <td style=\"text-align:center;\"> HC </td>\n   <td style=\"text-align:center;\"> HC2 </td>\n   <td style=\"text-align:center;\"> Stata </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Fixed effects Modelle mit `{fixest}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"fixest\")\n```\n:::\n\n\n[`{fixest}`](https://lrberge.github.io/fixest)) ist zwar noch relativ neu, aber bietet eine große Auswahl an Möglichkeiten: [logitische Modelle](#10_log_reg.qmd##feglm), mehr-dimensionale Fixed Effects, Multiway clustering, ...\nUnd es ist sehr schnell, [bspw. schneller](https://lrberge.github.io/fixest/#benchmarking) als Statas `reghdfe`. \nFür mehr Details empfiehlt sich die [Vignette](https://lrberge.github.io/fixest/articles/fixest_walkthrough.html).\n\nDie zentrale Funktion zur Schätzung linearer FE-Regressionsmodelle ist `feols()` - sie funktioniert ganz ähnlich zu `lm()`. \nAuch hier geben wir wieder eine Formel nach dem Schema `abhängige Variabe ~ unabhängige Variable(n)` an. \nWir fügen lediglich mit `|` die Variable hinzu, welche die FEs festlegt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fixest)\nfe_mod1 <- feols(mass ~ height | species, data = starwars)\nfe_mod1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOLS estimation, Dep. Var.: mass\nObservations: 58 \nFixed-effects: species: 31\nStandard-errors: Clustered (species) \n       Estimate Std. Error t value  Pr(>|t|)    \nheight 0.974876   0.044291 22.0105 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nRMSE: 9.69063     Adj. R2: 0.99282 \n                Within R2: 0.662493\n```\n:::\n:::\n\n\n`{fixest}` clustert automatisch die Standardfehler entlang der FE-Variable (hier also `species`).\nWenn wir das mal nicuth möchten, können wir mit der `se`-Option `= \"standard\"` ungeclusterte SE anfordern:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fe_mod1, se = 'standard')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOLS estimation, Dep. Var.: mass\nObservations: 58 \nFixed-effects: species: 31\nStandard-errors: IID \n       Estimate Std. Error t value   Pr(>|t|)    \nheight 0.974876   0.136463  7.1439 1.3797e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nRMSE: 9.69063     Adj. R2: 0.99282 \n                Within R2: 0.662493\n```\n:::\n\n```{.r .cell-code}\nsummary(fe_mod1, cluster = ~species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOLS estimation, Dep. Var.: mass\nObservations: 58 \nFixed-effects: species: 31\nStandard-errors: Clustered (species) \n       Estimate Std. Error t value  Pr(>|t|)    \nheight 0.974876   0.044291 22.0105 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nRMSE: 9.69063     Adj. R2: 0.99282 \n                Within R2: 0.662493\n```\n:::\n:::\n\n\n`{modelsummary}` zeigt die geclusterten SE:\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelsummary(list(fe_mod1),gof_omit = \"R|IC|Log|F\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> Model 1 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> height </td>\n   <td style=\"text-align:center;\"> 0.975 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.044) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 58 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Std.Errors </td>\n   <td style=\"text-align:center;\"> by: species </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Mehrebenenmodelle mit `{lme4}`\n\n\nMit `lmer()` können wir ein Random Intercept Modell berechnen, indem wir mit `( 1 | species)` angeben, dass für `species` jeweils ine eigenes Random Intercept berechnet werden soll:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nml_m3 <- lmer(mass ~ height + ( 1 | species), data=starwars)\n\nmodelsummary(list(ml_m3),gof_omit = \"R|IC|Log|F\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> Model 1 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> −52.698 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (47.579) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> height </td>\n   <td style=\"text-align:center;\"> 0.969 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.135) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> SD (Intercept species) </td>\n   <td style=\"text-align:center;\"> 231.270 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\"> SD (Observations) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> 14.472 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 58 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nMehr zu Mehrebenenmodellen und `{lme4}` in Blogposts von [Rense Nieuwenhuis ](http://www.rensenieuwenhuis.nl/r-sessions-16-multilevel-model-specification-lme4/) und [Tristan Mahr](https://www.tjmahr.com/plotting-partial-pooling-in-mixed-effects-models/).\n\n\n<!-- ## Abschließende Bemerkungen -->\n\n<!-- Zusammengefasst lassen uns `{fixest}` und `{modelsummary}` Standardfehler nach der eigentlichen Modellschätzung anpassen, indem wir die  `se` or `cluster` Optionen verwenden.  -->\n\n<!-- Ein [Blog Post von Grant Mcdermott](https://grantmcdermott.com/better-way-adjust-SEs/) argumentiert noch etwas ausführlicher, warum die nachträgliche Berechnung der Standardfehler (anstelle einer kompletten Neuschätzung des Modells) eine gute Idee ist - auch wenn es für Stata-Nutzende ein sehr ungewöhnliches Vorgehen ist. -->\n\n<!-- Die exakte Replikation von Standardfehlern aus anderen Programmen (bspw, Stata) ist oft schwieriger als es zunächst scheint.  -->\n<!-- Siehe auch die Diskussion [hier](https://github.com/sgaure/lfe/issues/1#issuecomment-530643808)  -->\n<!-- [Detaillierte vignette](https://lrberge.github.io/fixest/articles/standard_errors.html) `{fixest}` wie SEs aus anderen Programmen repliziert werden können. -->\n<!-- [Detailliertes Paper](http://sandwich.r-forge.r-project.org/articles/jss_2020.html) von den Autoren von `{sandwich}` zu diesem Thema.  -->\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}