{
  "hash": "88ddd14330c073f5b8fe30b0b2e7a41f",
  "result": {
    "markdown": "# RMarkdown\n\n\n\n\n\n[{rmarkdown}](https://rmarkdown.rstudio.com/) erlaubt, formatierte Textelemente mit [Markdown](https://www.markdownguide.org/cheat-sheet/) und R code bzw. Output zu kombinieren. \nAnders als ein R Script enthält ein RMarkdown-Dokument nicht nur Befehle, sondern auch Text - welcher mit Hilfe von [Markdown](https://www.markdownguide.org/cheat-sheet/)-Befehlen formatiert werden kann.\nSo können Grafiken, Tabellen, usw. direkt und zeitgleich mit dem Begleittext erstellt werden.\nMit R Markdown können wir HTML, PDF, Word Dokumente, PowerPoint und HTML Präsentationen, Webseiten und Bücher erstellen.\nDiese gesamte Webseite wurde mit [{R Markdown}](https://bookdown.org/yihui/rmarkdown-cookbook/) bzw. dem verwandten Paket [{Quarto}](www.quarto.org/) erstellt.\n\nDieses Kapitel kann lediglich eine kleine Einführung in RMarkdown sein.\nDie [Hilfeseiten und Dokumentation für R Markdown](https://rmarkdown.rstudio.com/) ist extrem umfangreich und auch die [Tutorials](https://rmarkdown.rstudio.com/lesson-1.html) und [Cheatsheets](https://rmarkdown.rstudio.com/lesson-15.html) sind hervorragend.\nDaher hier nur eine kleiner Überblick.\n\nEin RMarkdown-Dokument sieht in seiner Grundform ungefähr so aus:\n \n\n\n````markdown\n---\ntitle: \"Mein erstes RMarkdown-Dokument\"\nauthor: \"Mein Name\"\ndate: \"2022-09-11\"\noutput: pdf_document\n---\n  \n# Überschrift 1\n\n## Unterüberschrift 2\n\nDies ist ein R Markdown-Dokument. \nMarkdown ist eine einfache Syntax für die Erstellung von HTML-, PDF- und MS Word-Dokumenten. \nText kann **fett** und *kursiv* geschrieben werden. \n\nWenn wir auf die Schaltfläche **Knit** klicken, wird ein Dokument erstellt.\nDas sowohl den Inhalt als auch die Ausgabe aller eingebetteten R-Code-Bausteine innerhalb des Dokuments enthält. \nEin R-Code-Baustein (\"chunk\") sieht so aus:\n\n```{r cars}\n# hier kommt der R Code hin\nsummary(mtcars$qsec)\n```\n\n````\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_rmd_demo.png){fig-align='center' width=75%}\n:::\n:::\n\n## RMarkdown Dokument einrichten\n\nEin RMarkdown-Dokument können wir entweder einrichten, indem wir über das *Menü File* -> *R Markdown...* das Einrichtungsmenü aufrufen. Hier können wir den Titel, Autorennamen und das Datum sowie das Output-Format angeben:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_rmd_step1.png){fig-align='center' width=50%}\n:::\n\n::: {.cell-output-display}\n![](./pic/115_rmd_step2.png){fig-align='center' width=50%}\n:::\n:::\n\nAlternativ können wir auch rechts unten ein R Skript in RMarkdown-Dokument umformatieren:\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_rmd_stepX.png){fig-align='center' width=30%}\n:::\n:::\n\nRMarkdown-Dateien haben die Dateiendung `.rmd`.\nDas Knitten einer RMarkdown-Datei findet in einer neuen Umgebung statt - d.h. hier müssen alle Pakete und Daten geladen werden, auch wenn Sie in der Session bereits geladen sind.\n\n## Wichtige Begriffe\n\n- **Chunk**: Abschnitt mit R-Code innerhalb eines RMarkdown-Dokuments.\n\n    \n    ````default\n    ```{r}\n    # hier kommt der R Code hin\n    ```\n    ````\n\nVor und nach dem Chunk muss eine Leerzeile stehen. Die letzten drei Backticks müssen alleine in der letzten Zeile eines chunks stehen.\n\n\n- **Knit**: Beim  \"knitten\" eines RMarkdown Dokuments, werden zuerst alle chunks ausgeführt und der jeweilige Output in Markdown konvertiert. Im Anschluss ruft R [pandoc](https://pandoc.org/) auf um, den Markdown-Text in HTML, PDF oder Word zu konvertieren.\n\nKnitten kann entweder über das \"Knit\"-Symbol oben im Editor mit der Tastenkombination `⌘⇧K` \nauf macOS\noder STRG + `⇧` + k in Windows\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_knit-button.png){fig-align='center' width=30%}\n:::\n:::\n\n\n\n## Chunks einfügen\n\nWir können neue chunks auf zwei Arten erstellen\n\n- Mit `⌘⌥I` auf macOS oder `STRG + alt + I` auf Windows-Rechnern.\nFunktioniert auch, um einen existierenden chunck in zwei Teile zu teilen.\n\n- Mit dem \"Insert\" Button oben im Editor:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_insert_chunk.png){fig-align='center' width=30%}\n:::\n:::\n\n\n\n\n## Namen für chunks\n\nWir können den Abschnitten Namen hinzufügen, um die Navigation innerhalb des Dokument zu erleichtern. \nWenn wir in RStudio auf das kleine Dropdown-Menü (mit dem `#`) am unteren Rand des Editors klicken, bekommen wir ein Inhaltsverzeichnis, das alle Überschriften und Abschnitte anzeigt. \nWenn wir die Abschnitte benennen, werden sie in der Liste angezeigt. Wenn Sie keinen Namen angeben, wird der Chunk trotzdem angezeigt, aber Sie wissen nicht, was er tut.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_chunk-toc.png){fig-align='center' width=30%}\n:::\n:::\n\n\nNamen werden direkt nach dem  `{r` in der ersten Zeile des chunks angegeben. \nLeerzeichen sind in chunk-Namen nicht erlaubt, aber Unterstriche und Bindestriche. \n**Jeder chunk-Name darf innerhalb eines Dokuments nur einmal vergeben werden.**\n\n\n\n````default\n```{r chunk_Name}\n# R Code\n```\n\n````\n\n\n## Chunk-Optionen\n\nWir haben eine Reihe an Möglichkeiten festzulegen, wie RMarkdown mit Chunks umgehen soll. Eine vollständige Übersicht findest sich im [RMarkdown Reference Guide](https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf) oder auf der Webseite von [**knitr**](https://yihui.org/knitr/options/).\n\nOptionen werden in der ersten Zeile eines chunks nach dem `{r}` festgelegt:\n\n\n````default\n```{r name-of-this-chunk, warning=FALSE, message=FALSE}\n# Code goes here\n```\n````\n\nHier eine kleine Liste der wichtigsten Optionen:\n\n- `fig.width=5` & `fig.height=4`: Größe von Plots\n- `echo=FALSE`: Der chunk wird zwar ausgeführt und das Ergebnis im Zieldokument gezeigt, nicht aber der Code\n- `include=FALSE`: Der chunk wird zwar ausgeführt, aber im Zieldokument werden weder der Code selbst noch das Ergebnis gezeigt\n- `eval=FALSE`: Der chunk wird nicht ausgeführt, aber im Zieldokument gezeigt\n- `message=FALSE`: messages werden ausgeblendet (bspw. alles was beim Laden von Paketen angezeigt wird)\n- `warning=FALSE`: warnings werden ausgeblendet\n\nAußerdem können Optionen auch mit einem Klick auf das Zahnrad rechts oben in einem Chunk gesetzt werden:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_chunk-opts.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## Inline chunks\n\nEine weitere Stärke von RMarkdown ist, dass Ergebnisse direkt im Text dargestellt werden können. \nDazu dienen \"inline chunks\", um bspw. Kennzahlen aus einer Analyse einzufügen `` `r R Code` ``.\n\nSo können wir bspw. Werte in einem Chunk berechnen und dann in den Text einfügen.\n\n\n\n````default\n```{r find-avg-mpg, echo=FALSE}\nmedian_mpg <- mean(mtcars$mpg)\n```\n\nIm Median haben die Fahrzeuge einen Verbrauch von `r round(median_mpg, 1)` miles per gallon.\n````\n\n… führt zu folgendem Ergebnis:\n\n> Im Median haben die Fahrzeuge einen Verbrauch von 19.2 miles per gallon.\n\n## Output & `yaml`\n\nAls yaml bezeichnet man die Kopfzeile der RMarkdown-Dokumente. Hier können wir allerhand Voreinstellungen festlegen, insbesondere das Zieldateiformat. \n\nDas erste unter `output` aufgeführte Dateiformat ist der, der erzeugt wird, wenn wir auf die Schaltfläche \"knit\" klicken oder das Tastaturkürzel\n(⌘⇧K\" unter macOS; \"\nSTRG + Umschalt + K\" unter Windows) drücken. \n\nDie Einrückung im YAML-Abschnitts ist von Bedeutung, insbesondere dann, wenn unter den einzelnen Ausgabetypen verschachtelte Einstellungen vorhanden sind. So könnte ein typischer `Output`-Abschnitt aussehen, unter anderem können wir auch Word-Dokument als Formatierungsvorlage angeben:\n\n\n\n````markdown\n---\ntitle: \"Mein Worddokument\"\nauthor: \"My name\"\ndate: \"13. August 2022\"\noutput: \n  word_document: \n    reference_docx: \"Vorlage.docx\"\n    toc: yes\n    fig_caption: yes\n    fig_height: 4\n    fig_width: 5\n---\n````\n\nAuch für die anderen Output-Formate gibt es einen YAML-Befehl:\n\n\n\n````markdown\n---\ntitle: \"My document\"\noutput:\n  html_document: default\n  pdf_document: default\n  word_document: default\n---\n````\n\n\n[Eine Übersicht findet zu verschiedenen Optionen findet sich bspw. hier](https://zsmith27.github.io/rmarkdown_crash-course/lesson-4-yaml-headers.html) oder hier für  [Word](https://bookdown.org/yihui/rmarkdown/word-document.html), [HTML](https://bookdown.org/yihui/rmarkdown/html-document.html), [PDF](https://bookdown.org/yihui/rmarkdown/pdf-document.html) oder [Powerpoint](https://bookdown.org/yihui/rmarkdown/powerpoint-presentation.html)\n\nAlternativ lassen sich auch mit den Zahnrad oben neben dem Knit-Button Einstellungen für den YAML-Header festlegen:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/115_output-opts.png){fig-align='center' width=35%}\n:::\n:::\n\n\n## Fortgeschrittene Erstellung von Word-Dokumenten mit [`{officedown}`](https://ardata-fr.github.io/officeverse/officedown-for-word.html)\n\nMit [`{officedown}`](https://ardata-fr.github.io/officeverse/officedown-for-word.html) können wir bspw. Querverweise einbauen:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"officedown\")\n```\n:::\n\n\n````markdown\n---\ntitle: \"Mein zweites RMarkdown-Dokument\"\nauthor: \"Dein Name\"\ndate: \"2022-09-11\"\noutput:\n  officedown::rdocx_document\n---\n\n```{r setup, include=FALSE}\nlibrary(tidyverse)\nlibrary(officedown)\netbx <-  haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\", \n                         n_max = 2000,\n                         col_select = c(\"S1\",\"F518_SUF\",\"m1202\",\"az\",\"zpalter\",\"F1605e\")) %>% \n  filter(F518_SUF < 99998, m1202 %in% 1:4, zpalter < 9999 ) %>% \n  mutate(ausb = factor(m1202, levels = 1:4, labels = c(\"ohne\",\"dual/schul.\",\"Aufst.\",\"FH/Uni\")),\n         S1 = factor(S1,levels = 1:2,labels =c(\"m\",\"w\")))\n```\n\n```{r tab.cap=\"Eine Tabelle\", echo=FALSE,  tab.id='tab2'}\netbx %>% count(ausb)\n```\n\n\nDies ist ein Querverweis auf Tabelle \\@ref(tab:tab2).\n\n````\n\n\n## Übung\n\n+ Verwenden Sie das `14_Markdown.Rmd`-Datei als Vorlage\n+ Passen Sie den Verfasser:innen-Namen und Datum an\n+ Passen Sie ggf. den Pfad zum Datensatz an. Beachten Sie, dass der Pfad relativ zum Datenspeicherort sein muss\n+ Fügen Sie einen chunk mit einer Auszählung von `ausb` ein\n+ Fügen Sie einen chunk mit einem `summarise()`-Befehl ein - bspw.:\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\netbx %>% \n  group_by(S1,ausb) %>% \n  summarise(min =  min(F518_SUF,na.rm = T),\n            mean = mean(F518_SUF,na.rm = T),\n            max =  max(F518_SUF,na.rm = T))\n```\n:::\n\n\n+ Setzen Sie `include`, `echo` usw. nach Wunsch.\n\n+ Fügen nach Geschmack auch `{flextable}`-Befehle ein (Denken Sie an `library(flextable)` zu laden)\n\n+ Knitten Sie das Dokument zu einer Word-Dokument.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}