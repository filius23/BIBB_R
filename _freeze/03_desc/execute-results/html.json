{
  "hash": "ca8fafbc0ff1a50deb875bc7e6d9edc7",
  "result": {
    "markdown": "# Einen Überblick erhalten {#tab}\n\n\n\n\n\nNachdem wir Datensätze importiert haben, wollen wir nun einen Überblick erhalten. Jede statistische Auswertung startet mit einer Beschreibung der Variablen. In dieser Session werden wir sehen, wie wir uns mit Tabellen einen Überblick über die Informationen in einem Datensatz verschaffen können. Wir werden auch in dieser Session mit dem ETB2018 arbeiten. Wir starten also mit dem Einlesen der Daten:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"haven\") # falls nicht schon installiert \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # datenimport für stata-datensätze\nlibrary(tidyverse) # tidyverse\netb18 <- read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\")\n```\n:::\n\n\n## Häufigkeitsauszählungen\n\nUns stehen (mindestens) drei Befehle zur Verfügung, um eine Häufigkeitsauszählung zu erstellen:\n\n+ `table()`\n+ `xtabs()`\n+ `count()` aus `{dplyr}`\n\n\nEinfachster Befehl für die Auszählung von Häufigkeiten ist der `table()` Befehl. Beispielsweise mit der Variable `m1202` zur Ausbildung der Befragten.\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(etb18$m1202)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  -1    1    2    3    4 \n  45 1091 9297 1725 7854 \n```\n:::\n:::\n\nDie Syntax für `xtabs()` ist etwas anders, aber hier bekommen wir die Variablennamen nochmal angezeigt - der wesentliche Output ist aber der gleiche:\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~m1202,data=etb18)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm1202\n  -1    1    2    3    4 \n  45 1091 9297 1725 7854 \n```\n:::\n:::\n\nWir bekommen hier die absoluten Häufigkeiten angezeigt. In der ersten Zeile werden die verschiedenen Ausprägungen aufgelistet, in der zweiten Zeile stehen dann die Häufigkeiten. \n\nAllerdings werden sowohl für `table()` als auch `xabs()` die labels in der Ausgabe erstmal ignoriert. \nMit `val_labels()` aus dem Paket `{labelled}` können wir die Labels aus dem Datensatz abrufen. - bspw. steht `1` dafür, dass der*die Befragte die keine Berufsabschluss besitzt:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ninstall.packages(\"labelled\") # nur einmal nötig\nlibrary(labelled)\nval_labels(etb18$m1202)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                                            keine Angabe \n                                                      -1 \n                                    Ohne Berufsabschluss \n                                                       1 \nduale o. schulische Berufsausbildung/einf.,mittl. Beamte \n                                                       2 \nAufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.) \n                                                       3 \n        Fachhochschule, Universität/ geh., höhere Beamte \n                                                       4 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n1091 Befragte haben keinen Berufsabschluss, 1725 Befragte haben Aufstiegsfortbildung usw. (Zu labels und die Arbeit mit value labels in R später mehr)\n\nMit `count()` aus `{dplyr}` bekommen wir die labels direkt angezeigt, auch hier verwenden wir wieder die Schreibweise [mit der Pipe `%>%`](#pipe):\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% count(m1202)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  m1202                                                             n\n  <dbl+lbl>                                                     <int>\n1 -1 [keine Angabe]                                                45\n2  1 [Ohne Berufsabschluss]                                      1091\n3  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9297\n4  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725\n5  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7854\n```\n:::\n:::\n\n\n\nWir können auch Tabellen unter einem frei wählbaren Namen ablegen und später wieder aufrufen:\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- xtabs(~m1202,etb18)\nt2 <- etb18 %>% count(m1202)\n```\n:::\n\n\nWir sehen hier, dass die Tabelle mit `xtabs()` eine neue Objektform ist, ein table. Mit `count()` wird hingegen ein `data.frame` erstellt.\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(t1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"xtabs\" \"table\"\n```\n:::\n\n```{.r .cell-code}\nclass(t2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n## Andere Tabellenwerte\n\nMit Hilfe weiterer Funktionen können wir die Häufigkeitstabellen jeweils anpassen:\n\n+ `prop.table()`: relative Werte/Anteile\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~m1202,data=etb18) %>% prop.table(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm1202\n         -1           1           2           3           4 \n0.002248651 0.054517290 0.464571257 0.086198281 0.392464521 \n```\n:::\n:::\n\n0.225% aller Befragten haben keine Berufsausbildung.\n\n+ `cumsum()`: kumulierte Werte\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~m1202,data=etb18) %>% cumsum(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   -1     1     2     3     4 \n   45  1136 10433 12158 20012 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n1136 Befragte haben eine duale Berufsausbildung oder keine Berufsausbildung.\n\n\n+ `prop.table()` mit `cumsum()`: kumulierte relative Häufigkeiten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~m1202,data=etb18) %>% prop.table() %>% cumsum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         -1           1           2           3           4 \n0.002248651 0.056765940 0.521337198 0.607535479 1.000000000 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n5.677% aller Befragten haben eine duale Berufsausbildung oder keine Berufsausbildung.\n\n## Kontingenztabellen\n\nAus Kontingenztabellen erfahren wir, wie häufig Merkmalskombinationen auftreten. Auch für Kontingenztabellen können wir `table()` verwenden. Zum Beispiel können wir uns eine Tabelle anzeigen lassen, die uns die Häufigkeiten des Familienstatus getrennt nach Geschlechtern zeigt:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(etb18$S1, etb18$m1202)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n      -1    1    2    3    4\n  1   21  594 4371 1073 4015\n  2   24  497 4926  652 3839\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~S1+m1202, data = etb18)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   m1202\nS1    -1    1    2    3    4\n  1   21  594 4371 1073 4015\n  2   24  497 4926  652 3839\n```\n:::\n:::\n\n\nWir erkennen aus dieser Tabelle beispielsweise, dass 4926 Befragte weiblich (`S1=2`) und ohne Berufsabschluss (`m1202 = 5`) sind.\n\nHier ist `xtabs()` informativer als `table()`. Hier werden die Spalten und Zeilen beschriftet. Der Übersichtlichkeit halber verwende ich meistens `xtabs()`, alle Operationen sind aber genauso auch mit `table()` möglich. \n\n### [Übung](#descue1) {#ue3_1}\n\n## Fehlende Werte in R: `NA` {#NA03}\n\nUm die Werte mit `-1` auch in R als fehlende Angabe zu kennzeichnen, müssen wir sie in `etb18` auf `NA` setzen. Dazu rufen wir `etb18$m1202` auf und filtern mit `[]` nur die Werte für `m1202` gleich `-1` heraus. Im vorherigen Kapitel haben wir kennengelernt, dass wir so spezifische Werte aufrufen können:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18$m1202[etb18$m1202 == -1] # nur m1202 = -1 aufrufen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<labelled<double>[45]>: Höchster Ausbildungsabschluss\n [1] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n[26] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\nLabels:\n value                                                    label\n    -1                                             keine Angabe\n     1                                     Ohne Berufsabschluss\n     2 duale o. schulische Berufsausbildung/einf.,mittl. Beamte\n     3 Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)\n     4         Fachhochschule, Universität/ geh., höhere Beamte\n```\n:::\n:::\n\n(Hier bekommen wir nochmal die Labels ausgespuckt, was etwas suboptimal für die Übersichtlichkeit ist.)\n\nWenn wir daran mit `<-` einen neuen Wert angeben, werden die aufgerufenen Werte damit überschrieben - hier überschreiben wir also alle Werte für `m1202 == -1` mit `NA`: \n\n::: {.cell}\n\n```{.r .cell-code}\netb18$m1202[etb18$m1202 == -1]  <- NA\n```\n:::\n\n\n`NA` ist in der R der Code für fehlende Angaben, sie werden dann in `xtabs()` nicht aufgeführt:\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~m1202,data=etb18)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm1202\n   1    2    3    4 \n1091 9297 1725 7854 \n```\n:::\n:::\n\nWir können aber mit der Option `addNA = TRUE` die Auszählung von `NA` explizit anfordern:\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~m1202,data=etb18,addNA = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm1202\n   1    2    3    4 <NA> \n1091 9297 1725 7854   45 \n```\n:::\n:::\n\n\nIn `count()` wird `NA` auch mit ausgezählt:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% count(m1202)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  m1202                                                             n\n  <dbl+lbl>                                                     <int>\n1  1 [Ohne Berufsabschluss]                                      1091\n2  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9297\n3  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725\n4  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7854\n5 NA                                                               45\n```\n:::\n:::\n\nMöchten wir das umgehen, nehmen wir wieder `filter()` zu Hilfe - mit `is.na()` können wir `NA` identifizieren. Durch Voranstellen von `!` können wir damit anfordern, dass alle nicht-`NA`-Werte mit `TRUE` behalten werden:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% filter(!is.na(m1202)) %>% count(m1202)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  m1202                                                            n\n  <dbl+lbl>                                                    <int>\n1 1 [Ohne Berufsabschluss]                                      1091\n2 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9297\n3 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725\n4 4 [Fachhochschule, Universität/ geh., höhere Beamte]          7854\n```\n:::\n:::\n\n\nMehr zu fehlenden Werten findet sich beispielsweise im [**The missing book**](https://tmb.njtierney.com/) von Nicholas Tierney & Allison Horst.\n\n### [Übung](#descue2) {#ue3_2}\n\n\n## Mehrere Kennzahlen in einer Tabelle\n\nAus Stata kennen viele sicherlich folgende Ansicht mit `tab m1202`:\n\n::: {.cell collectcode='false'}\n::: {.cell-output .cell-output-stdout}\n```\n          Höchster Ausbildungsabschluss |      Freq.     Percent        Cum.\n----------------------------------------+-----------------------------------\n                   Ohne Berufsabschluss |      1,091        5.46        5.46\nduale o. schulische Berufsausbildung/ei |      9,297       46.56       52.03\nAufstiegsfortbildung (Meister, Technike |      1,725        8.64       60.67\nFachhochschule, Universität/ geh., höhe |      7,854       39.33      100.00\n----------------------------------------+-----------------------------------\n                                  Total |     19,967      100.00\n```\n:::\n:::\n\nIn R hat ein `table()` oder `xtabs()` immer nur eine Art von Kennzahlen. \nDa wir aber mit `count()` die Auszählungen als `data.frame()` erhalten, können wir die relativen und kumulierten Häufigkeiten einfach als neue Variablen anfügen. Dabei hilft uns `mutate()`: mit `mutate(neu_variable = )` können wir neue Variablen in einen `data.frame()` hinzufügen:\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/103_mutate.png){fig-align='center' width=90% height=90%}\n:::\n:::\n\n\n`mutate()` entspricht also `dat1$var <- ....`, das wir im vorherigen Kapitel kennen gelernt hatten. Allerdings können wir mit `mutate()` einfacher in einer Pipe-Kette arbeiten (und außerdem einige weitere Operationen einfacher erledigen - dazu später mehr).\n\nUm also eine neue Spalte `pct`in unseren `data.frame` mit den Auszählungen einzufügen gehen wir wie folgt vor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n   count(m1202) # ausgangsbefehl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  m1202                                                             n\n  <dbl+lbl>                                                     <int>\n1  1 [Ohne Berufsabschluss]                                      1091\n2  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9297\n3  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725\n4  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7854\n5 NA                                                               45\n```\n:::\n\n```{.r .cell-code}\netb18 %>% \n   count(m1202) %>% \n   mutate(pct= prop.table(n)*100) # erweitert um pct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  m1202                                                             n    pct\n  <dbl+lbl>                                                     <int>  <dbl>\n1  1 [Ohne Berufsabschluss]                                      1091  5.45 \n2  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9297 46.5  \n3  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725  8.62 \n4  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7854 39.2  \n5 NA                                                               45  0.225\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n   count(m1202) %>% \n   mutate(pct= prop.table(n)*100,\n          Cum = cumsum(pct)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  m1202                                                          n    pct    Cum\n  <dbl+lbl>                                                  <int>  <dbl>  <dbl>\n1  1 [Ohne Berufsabschluss]                                   1091  5.45    5.45\n2  2 [duale o. schulische Berufsausbildung/einf.,mittl. Bea…  9297 46.5    51.9 \n3  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.…  1725  8.62   60.5 \n4  4 [Fachhochschule, Universität/ geh., höhere Beamte]       7854 39.2    99.8 \n5 NA                                                            45  0.225 100   \n```\n:::\n:::\n\n\nDer Punkt `.` steht jeweils für das Ergebnis des vorherigen Schritts. Hier also:\n\n   1. Erstelle die Häufigkeitstablle für `m1202` *und dann (`%>%`)*\n   2. Berechne aus `n` die relativen Häufigkeiten *und dann (`%>%`)*\n   3. Berechne dafür die kumulierten Werte basierend auf `pct` *und dann (`%>%`)*\n   4. Runde das Ergebnis auf 3 Nachkommastellen\n\nEtwas störend ist aber noch das `NA`, die für fehlende Angaben steht und nicht berücksichtigt werden soll.\nDas können wir einfach `!is.na()` in `filter()` ausschließen:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n   count(m1202) %>% \n   mutate(pct= prop.table(n)*100,\n          Cum = cumsum(pct)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  m1202                                                           n   pct    Cum\n  <dbl+lbl>                                                   <int> <dbl>  <dbl>\n1 1 [Ohne Berufsabschluss]                                     1091  5.46   5.46\n2 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamt…  9297 46.6   52.0 \n3 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.…  1725  8.64  60.7 \n4 4 [Fachhochschule, Universität/ geh., höhere Beamte]         7854 39.3  100   \n```\n:::\n:::\n\n\n## Kontingenztabellen mit `count()` {#crosscount}\n\nFür eine Kontingenztabelle mit `count()` geben wir einfach die interessierenden Variablen in `count()` an. Das Ergebnis wird immer im \"long shape\" Format ausgegeben:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n   count(m1202,S1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  m1202                                                        S1              n\n  <dbl+lbl>                                                    <dbl+lbl>   <int>\n1 1 [Ohne Berufsabschluss]                                     1 [männlic…   594\n2 1 [Ohne Berufsabschluss]                                     2 [weiblic…   497\n3 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte] 1 [männlic…  4371\n4 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte] 2 [weiblic…  4926\n5 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)] 1 [männlic…  1073\n6 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)] 2 [weiblic…   652\n7 4 [Fachhochschule, Universität/ geh., höhere Beamte]         1 [männlic…  4015\n8 4 [Fachhochschule, Universität/ geh., höhere Beamte]         2 [weiblic…  3839\n```\n:::\n:::\n\nAuch hier können wir wie oben die relativen und kumulierten relativen Häufigkeiten anfügen:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n  count(m1202,S1) %>% \n  mutate(pct= prop.table(n)*100) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n  m1202                                                      S1          n   pct\n  <dbl+lbl>                                                  <dbl+l> <int> <dbl>\n1 1 [Ohne Berufsabschluss]                                   1 [män…   594  2.97\n2 1 [Ohne Berufsabschluss]                                   2 [wei…   497  2.49\n3 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beam… 1 [män…  4371 21.9 \n4 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beam… 2 [wei…  4926 24.7 \n5 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä… 1 [män…  1073  5.37\n6 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä… 2 [wei…   652  3.27\n7 4 [Fachhochschule, Universität/ geh., höhere Beamte]       1 [män…  4015 20.1 \n8 4 [Fachhochschule, Universität/ geh., höhere Beamte]       2 [wei…  3839 19.2 \n```\n:::\n:::\n\n\nWas aber wenn wir jetzt die Anteile *innerhalb* von Männern und Frauen möchten? \nHier hilft uns `group_by()` weiter:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n   filter(!is.na(m1202)) %>% \n   count(m1202,S1) %>% \n   group_by(S1) %>% \n   mutate(pct_gender = prop.table(n)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n# Groups:   S1 [2]\n  m1202                                                    S1          n pct_g…¹\n  <dbl+lbl>                                                <dbl+l> <int>   <dbl>\n1 1 [Ohne Berufsabschluss]                                 1 [män…   594  0.0591\n2 1 [Ohne Berufsabschluss]                                 2 [wei…   497  0.0501\n3 2 [duale o. schulische Berufsausbildung/einf.,mittl. Be… 1 [män…  4371  0.435 \n4 2 [duale o. schulische Berufsausbildung/einf.,mittl. Be… 2 [wei…  4926  0.497 \n5 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u… 1 [män…  1073  0.107 \n6 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u… 2 [wei…   652  0.0658\n7 4 [Fachhochschule, Universität/ geh., höhere Beamte]     1 [män…  4015  0.399 \n8 4 [Fachhochschule, Universität/ geh., höhere Beamte]     2 [wei…  3839  0.387 \n# … with abbreviated variable name ¹​pct_gender\n```\n:::\n:::\n\n\n49.7% der Befragten Frauen haben eine duale oder schule Berufsausbildung. \n\n\nWir können dann auch mit einem angehängten `filter()` nur die beiden Zeilen `m1202 == 2` ausgeben lassen:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n   count(m1202,S1) %>% \n   group_by(S1) %>% \n   mutate(pct_gender = prop.table(n)) %>% \n  filter(m1202 == 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n# Groups:   S1 [2]\n  m1202                                                    S1          n pct_g…¹\n  <dbl+lbl>                                                <dbl+l> <int>   <dbl>\n1 2 [duale o. schulische Berufsausbildung/einf.,mittl. Be… 1 [män…  4371   0.435\n2 2 [duale o. schulische Berufsausbildung/einf.,mittl. Be… 2 [wei…  4926   0.497\n# … with abbreviated variable name ¹​pct_gender\n```\n:::\n:::\n\n\n...wir können diese Ausgaben natürlich immer auch ablegen:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_aus_gender <- \n      etb18 %>% \n        filter(!is.na(m1202)) %>% \n         count(m1202,S1) %>% \n         group_by(S1) %>% \n         mutate(pct_gender = prop.table(n))\nclass(tab_aus_gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n...und dann wieder weiterverwenden\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_aus_gender %>%  filter(m1202 == 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n# Groups:   S1 [2]\n  m1202                                                    S1          n pct_g…¹\n  <dbl+lbl>                                                <dbl+l> <int>   <dbl>\n1 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u… 1 [män…  1073  0.107 \n2 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u… 2 [wei…   652  0.0658\n# … with abbreviated variable name ¹​pct_gender\n```\n:::\n:::\n\n\n\n\n### [Übung](#descue3) {#ue3_3}\n\n::: callout-tip\n\nBei langen Tabellen werden nicht alle Werte ausgegeben, sondern nur die ersten Zeilen. Um hier alle Werte zu bekommen, hilft `print(n=Inf)`:\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% count(Bula,S1) # wird abgeschnitten\netb18 %>% count(Bula,S1) %>% print(n=Inf) # alle Werte werden gezeigt\n```\n:::\n\n\n\n:::\n\n##  Lage- & Konzentrationsmaße \n\nLagemaße sind statische Kennzahlen zur Beschreibung von metrischen Variablen, wie beispielsweise das arithmetische Mittel oder der Median. Einen Überblick bietet `summary()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(etb18$F518_SUF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1    2200    3500   19811    6000   99999 \n```\n:::\n:::\n\n\nAllerdings gibt es im Datensatz keine Befragten mit einem Bruttoverdienst von 99999 EUR. \n99999 ist der Zahlencode *keine Angabe* , 99998 für *weiß nicht*. Um aussagekräftige Werte zu bekommen, müssen wir diese Werte mit `NA` überschreiben:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\netb18$F518_SUF[etb18$F518_SUF %in% 99998:99999] <- NA # missings überschreiben\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(etb18$F518_SUF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      1    2000    3000    3532    4200   72000    3377 \n```\n:::\n:::\n\n\n\nWir können aber auch bestimmte Kennzahlen anfordern sehen uns die Bruttoverdienste der Befragten zu beschreiben:\n\n+ Minimum und Maximum: `min()`, `max()`\n+ arithm. Mittel: `mean()`\n+ Median: `median()`\n+ Quantile: `quantile()`\n+ Varianz: `var()`\n+ Standardabweichung: `sd()`\n+ Gini-Koeffizient: `Gini` aus dem Paket `{ineq}`\n\n\nWenn eine Variable `NA` enthält, müssen diese explizit ignoriert werden - ansonsten wird nur `NA` ausgegeben:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(etb18$F518_SUF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\nDeshalb müssen wir die Option `na.rm = T` angeben:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(etb18$F518_SUF,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3532.109\n```\n:::\n:::\n\n\nEin Quantil einer Verteilung trennt die Daten so in zwei Teile, dass `x`\\% der Daten darunter und 100-`x`\\% darüber liegen. Mit `quantile()`wir durch Angabe in der Option `probs =` beliebige Quantilgrenzen anfordern, zB. für die 40%-Quantilgrenze:  \n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(etb18$F518_SUF,probs = .4, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 40% \n2550 \n```\n:::\n:::\n\n\nDen [Gini-Koeffizienten](#gini_graph) können wir mit `Gini()` aus dem Paket `ineq` berechnen:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ineq\") # einmal installieren\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ineq) # ineq laden\nGini(etb18$F518_SUF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3543509\n```\n:::\n:::\n\n\n\n### Kennzahlentabelle mit `summarise`\n\nMit Hilfe von `summarise()` aus `{dplyr}` können wir ein eigenes `summary()` bauen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% summarise(Minimum = min(F518_SUF,na.rm = T),\n                    Median = median(F518_SUF,na.rm = T),\n                    Mittelwert = mean(F518_SUF,na.rm = T),\n                    Maximum = max(F518_SUF,na.rm = T),\n                    Gini = Gini(F518_SUF))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n  Minimum   Median Mittelwert Maximum    Gini\n  <dbl+lbl>  <dbl>      <dbl> <dbl+lbl> <dbl>\n1 1           3000      3532. 72000     0.354\n```\n:::\n:::\n\n\n\nDer Vorteil des Ganzen wird im nächsten Schritt klarer.\n\n### Lage- und Streuungsmaße vergleichen\n\n\nHäufig werden diese Kennzahlen erst im Vergleich richtig spannend, dafür hilft uns das `group_by()` Argument und `summarise()`:\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 %>% \n  group_by(Bula) %>% \n  summarise(mean_inc = mean(F518_SUF, na.rm = T) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 2\n   Bula                        mean_inc\n   <dbl+lbl>                      <dbl>\n 1  1 [Schleswig-Holstein]        3495.\n 2  2 [Hamburg]                   3837.\n 3  3 [Niedersachsen]             3350.\n 4  4 [Bremen]                    3767.\n 5  5 [Nordrhein-Westfalen]       3673.\n 6  6 [Hessen]                    3860.\n 7  7 [Rheinland-Pfalz]           3859.\n 8  8 [Baden-Württemberg]         3691.\n 9  9 [Bayern]                    3634.\n10 10 [Saarland]                  3510.\n11 11 [Berlin]                    3528.\n12 12 [Brandenburg]               2960.\n13 13 [Mecklenburg-Vorpommern]    3034.\n14 14 [Sachsen]                   2897.\n15 15 [Sachsen-Anhalt]            2757.\n16 16 [Thüringen]                 2835.\n```\n:::\n\n```{.r .cell-code}\netb18 %>% \n  group_by(Bula) %>% \n  summarise(mean_inc = mean(F518_SUF, na.rm = T),\n            median_inc = median(F518_SUF, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 3\n   Bula                        mean_inc median_inc\n   <dbl+lbl>                      <dbl>      <dbl>\n 1  1 [Schleswig-Holstein]        3495.       2900\n 2  2 [Hamburg]                   3837.       3100\n 3  3 [Niedersachsen]             3350.       3000\n 4  4 [Bremen]                    3767.       3300\n 5  5 [Nordrhein-Westfalen]       3673.       3200\n 6  6 [Hessen]                    3860.       3300\n 7  7 [Rheinland-Pfalz]           3859.       3000\n 8  8 [Baden-Württemberg]         3691.       3100\n 9  9 [Bayern]                    3634.       3000\n10 10 [Saarland]                  3510.       3000\n11 11 [Berlin]                    3528.       2900\n12 12 [Brandenburg]               2960.       2700\n13 13 [Mecklenburg-Vorpommern]    3034.       2600\n14 14 [Sachsen]                   2897.       2500\n15 15 [Sachsen-Anhalt]            2757.       2400\n16 16 [Thüringen]                 2835.       2500\n```\n:::\n\n```{.r .cell-code}\netb18 %>% \n  filter(Bula %in% c(3,5)) %>% \n  group_by(Bula) %>% \n  summarise(mean_inc = mean(F518_SUF, na.rm = T) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Bula                    mean_inc\n  <dbl+lbl>                  <dbl>\n1 3 [Niedersachsen]          3350.\n2 5 [Nordrhein-Westfalen]    3673.\n```\n:::\n:::\n\n\n\n\n<!-- ::: callout-tip -->\n\n<!-- Für den Kennzahlenvergleich können wir auch die Schreibweise mit `[]` verwenden, beispielsweise können wir für das gesamte `summary` die Differenz zwischen NRW und Niedersachsen bilden: -->\n<!-- ```{r sw5_su_vgl} -->\n<!-- summary(etb18$F518_SUF[etb18$Bula == 5], na.rm = T) - -->\n<!--   summary(etb18$F518_SUF[etb18$Bula == 3], na.rm = T)  -->\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- ::: note -->\n\n<!-- [**Häufige Fehlermeldungen**](#rerror) -->\n\n<!-- ::: -->\n\n### [Übung](#descue4) {#ue3_4}\n\n\n## Übungen\n\n<!-- {{< include _03_0_ueb.qmd >}} -->\nAlle Übungen beziehen sich auf die Erwerbstätigenbefragung:\n\n\n::: {.cell}\n\n```{.r .cell-code}\netb18 <- read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\")\n```\n:::\n\n\n[Abschnitt zum Einlesen](02_intro.qmd#import)\n\n\n### Übung 1 {#descue1}\n\nWir interessieren uns für die Variable `gkpol`, welche die Größe der Wohngemeinde der Befragten enthält:\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"hpzrcsqbie\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#hpzrcsqbie .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 9px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hpzrcsqbie .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hpzrcsqbie .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hpzrcsqbie .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hpzrcsqbie .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hpzrcsqbie .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hpzrcsqbie .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hpzrcsqbie .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hpzrcsqbie .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hpzrcsqbie .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hpzrcsqbie .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hpzrcsqbie .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hpzrcsqbie .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hpzrcsqbie .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hpzrcsqbie .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hpzrcsqbie .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hpzrcsqbie .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hpzrcsqbie .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hpzrcsqbie .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hpzrcsqbie .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hpzrcsqbie .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hpzrcsqbie .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hpzrcsqbie .gt_left {\n  text-align: left;\n}\n\n#hpzrcsqbie .gt_center {\n  text-align: center;\n}\n\n#hpzrcsqbie .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hpzrcsqbie .gt_font_normal {\n  font-weight: normal;\n}\n\n#hpzrcsqbie .gt_font_bold {\n  font-weight: bold;\n}\n\n#hpzrcsqbie .gt_font_italic {\n  font-style: italic;\n}\n\n#hpzrcsqbie .gt_super {\n  font-size: 65%;\n}\n\n#hpzrcsqbie .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#hpzrcsqbie .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hpzrcsqbie .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hpzrcsqbie .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hpzrcsqbie .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hpzrcsqbie .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hpzrcsqbie .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\">label</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\">value</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_left\">unter 2.000 Einwohner</td>\n<td class=\"gt_row gt_right\">1</td></tr>\n    <tr><td class=\"gt_row gt_left\">2.000 bis unter 5.000 Einwohner</td>\n<td class=\"gt_row gt_right\">2</td></tr>\n    <tr><td class=\"gt_row gt_left\">5.000 bis unter 20.000 Einwohner</td>\n<td class=\"gt_row gt_right\">3</td></tr>\n    <tr><td class=\"gt_row gt_left\">20.000 bis unter 50.000 Einwohner</td>\n<td class=\"gt_row gt_right\">4</td></tr>\n    <tr><td class=\"gt_row gt_left\">50.000 bis unter 100.000 Einwohner</td>\n<td class=\"gt_row gt_right\">5</td></tr>\n    <tr><td class=\"gt_row gt_left\">100.000 bis unter 500.000 Einwohner</td>\n<td class=\"gt_row gt_right\">6</td></tr>\n    <tr><td class=\"gt_row gt_left\">500.000 und mehr Einwohner</td>\n<td class=\"gt_row gt_right\">7</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n\n+ Lassen Sie sich eine Tabelle mit den absoluten Häufigkeiten anzeigen, nutzen Sie dafür sowohl `table()`, `xtabs()` als auch `count()` (Denken Sie daran, `{tidyverse}` zu laden für `count()`). \n+ Lassen Sie sich der relativen Häufigkeiten (Anteile) ausgeben (nutzen sie entweder `table()` oder `xtabs()`)\n+ Erstellen Sie eine Kontingenztabelle, indem Sie neben `gkpol` auch das Geschlecht `S1` (2 = Frauen, 1 = Männer) mit einbeziehen\n+ Wie viel Prozent der Befragten sind Frauen, die in einer Gemeinde mit unter 2000 Einwohnern leben? Berechnen Sie die relativen Häufigkeiten.\n\n[Zurück nach oben](#ue3_1)\n\n### Übung 2 {#descue2}\n\nWir interessieren uns für die Variable `S3`. Die Variable `S3` erfasst den höchsten allgemeinen Schulabschluss der Befragten. Erstellen Sie mit Hilfe von `count()` eine Tabelle mit absoluten, relativen und kumulierten relativen Häufigkeiten.\n  \n  + Erstellen Sie zunächst eine Auszählung mit `count()` und fügen Sie dann die relativen und kumulierten relativen Häufigkeiten hinzu.\n  + Profi-Aufgabe: Ersetzen Sie ggf. Werte mit `NA` und lassen Sie sich die Tabelle erneut ausgeben. [Siehe hier](#NA03)\n  \n[Zurück nach oben](#ue3_2)\n  \n### Übung 3 {#descue3}\n  \n+ Erstellen Sie eine vollständige Häufigkeitstabelle für die Variable `gkpol` und das Geschlecht (`S1`)\n  + Verwenden Sie die Befehle aus Übung 2- was müssen Sie anpassen, um die Tabelle für `gkpol`\n  + Erweitern Sie jetzt die Auszählung um `S1`\n  + Berechnen Sie die Anteile von `gkpol` innerhalb von Männern und Frauen.\n  + Wie viel Prozent der Frauen leben in einer Gemeinde mit unter 2000 Einwohnern?  \n  + Profi-Aufgabe: Wie viel Prozent der Befragten, die in einer Gemeinde mit unter 2000 Einwohnern leben, sind Frauen? (`S1` = 2, `gkpol` = 1)\n  \n[Zurück nach oben](#ue3_3)\n\n### Übung 4 {#descue4}\n\nBeschreiben Sie das Alter der Befragten (`zpalter`) mit `summary` und erstellen Sie selbst einen Überblick mit Hilfe von `summarise()`, der einen Vergleich des Befragtenalters nach Gemeindegrößen erlaubt.\n\n  + Überschreiben Sie zunächst die Missings mit `NA`: \n\n::: {.cell}\n\n```{.r .cell-code}\netb18$zpalter[etb18$zpalter>100] <- NA\n```\n:::\n\n  \n  + Erstellen Sie einen Überblick mit `summary()`\n  + Erstellen Sie einen Überblick mit dem Minimum, Median, arith. Mittel, Varianz und Maximum der Alterswerte mit Hilfe von `summarise()`\n  + Erweitern Sie diesen Überblick dann so, dass sie einen Vergleich der Kennzahlen für die verschieden `gkpol`-Kategorien ausgegeben bekommen.\n\n[Zurück nach oben](#ue3_4)\n\n## Hinweise \n\n### Runden mit `round()` {#round}\n\n\nErläuterung: Sie können mit `round(x , 3)` Werte auf eine gewisse Zahl von Ziffern runden. Die zweite Zahl in der Klammer (nach dem Komma) gibt an, wieviele Dezimalstellen wir möchten:\n\n::: {.cell}\n\n```{.r .cell-code}\nround(21.12121123,digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21.121\n```\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21.12121\n```\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n:::\n\n\nWir können also die relativen Häufigkeiten runden und so die Tabelle von oben übersichtlicher machen: \n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~S1+m1202, data = etb18) %>% \n  prop.table(.,margin = 1) %>% \n  round(.,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   m1202\nS1      1     2     3     4\n  1 0.059 0.435 0.107 0.399\n  2 0.050 0.497 0.066 0.387\n```\n:::\n:::\n\n\n\n\n### Wie kann ich mir in R automatisch die häufigste/seltenste Ausprägung ausgeben lassen?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt4 <- table(etb18$zpalter)\nt4[which(t4 == max(t4))] # Modus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 54 \n790 \n```\n:::\n:::\n\n54 ist mit 790 Befragten die häufigste Ausprägung.\n\n\n\n### Gini-Koeffizient {#gini_graph}\n\n\n\n\nZur Beschreibung der Verteilung von Einkommens- und Vermögensdaten wird häufig der Gini-Koeffizient verwendet. Der Gini-Koeffizient beruht auf der Fläche zwischen der Lorenzkurve und der Gleichverteilung. Auf der x-Achse werden die kumulierten Perzentile der Befragten abgetragen, auf der y-Achse die Perzentile des HH-Einkommens:\n\n\n::: {.cell layout-align=\"center\" hash='03_desc_cache/html/gini_plot1_6eed29cba7a9ac3b6c926d3e3e7fe4a9'}\n::: {.cell-output-display}\n![](03_desc_files/figure-html/gini_plot1-1.png){fig-align='center' width=75% height=75%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='03_desc_cache/html/unnamed-chunk-36_3997b23134881691aa3ec3125978256f'}\n::: {.cell-output-display}\n![](03_desc_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=75% height=75%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}