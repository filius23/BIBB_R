{
  "hash": "8170171878cb5c80db70b8f567dcd5d4",
  "result": {
    "markdown": "# Data Wrangling III {#wrang3}\n\n\n\n\n\n\n## Datensätze verbinden\n\n> A mutating join allows you to combine variables from two tables. It first matches observations by their keys, then copies across variables from one table to the other.  \n[R for Data Science: Mutating joins](http://r4ds.had.co.nz/relational-data.html#mutating-joins)\n\n\nEin Überblick zu den wichtigsten Befehlen[^tdyref]\n\n[^tdyref]: Illustrationen mit [tidyexplain](https://github.com/gadenbuie/tidyexplain)\n\n\n::: {.cell layout-align=\"center\" hash='07_data_wrangle3_cache/html/intial-dfs_a29d8451dc413e70159d97572e63b27f'}\n::: {.cell-output-display}\n![](07_data_wrangle3_files/figure-html/intial-dfs-1.png){fig-align='center' width=40%}\n:::\n:::\n\n\n<!-- <img src=\"pic/static/png/original-dfs.png\" width=\"480px\" /> -->\n\n\n::: {.cell hash='07_data_wrangle3_cache/html/inner-join_df18059c0dbaf42ee7e4a6deb10809e7'}\n\n:::\n\n::: {.cell hash='07_data_wrangle3_cache/html/left-join_b1c6bac35ee2c452c96000ec3556464b'}\n\n:::\n\n::: {.cell hash='07_data_wrangle3_cache/html/left-join-extra_0e905a672da8ccceec0b5bfdb7894217'}\n\n:::\n\n::: {.cell hash='07_data_wrangle3_cache/html/right-join_9219727a8d5aff7d2d906b379bbac915'}\n\n:::\n\n::: {.cell hash='07_data_wrangle3_cache/html/full-join_889de730ba0d2025535dbf46abe43cc7'}\n\n:::\n\n\n\n::: {layout-ncol=3}\n![](pic/inner-join.gif)\n\n![](pic/left-join-extra.gif)\n\n![](pic/full-join.gif) \n:::\n\nEs gibt natürlich auch [`right_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html)  oder [`anti_join()`](https://dplyr.tidyverse.org/reference/filter-joins.html). \nFür eine tiefergehende Einführung lohnt sich das Kapitel [Relational Data](https://r4ds.had.co.nz/relational-data.html#relational-data) aus [R for Data Science](https://r4ds.had.co.nz/).\n\n\nEine sehr hilfreiche Option in den `..._join()` ist die Verbindung unterschiedlicher Variablen.\nBspw. haben wir hier einige Fälle aus der ETB18 und \n\n\n::: {.cell hash='07_data_wrangle3_cache/html/exmap_49d27d08e0bdf96d17000fb7120f76bd'}\n\n```{.r .cell-code  code-fold=\"true\"}\netb18_int_bl <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                                col_select = c(\"intnr\",\"Bula\") # mit col_select() können Variablen ausgewählt werden\n                                )\n\netb_ids <-  etb18_int_bl %>% slice(c(1,125,1230,21010,8722) )\n\nalo_bula <- data.frame(bundesland = seq(1:11),\n                       Werte = sample(letters,size = 11) # mit sample() kann eine zufällige Auswahl getroffen werden \n                       )\n```\n:::\n\n::: {.cell hash='07_data_wrangle3_cache/html/join_by_b7239a205344c0d43614ce8d92e74752'}\n\n```{.r .cell-code}\netb_ids\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 2\n#>     intnr Bula                    \n#>     <dbl> <dbl+lbl>               \n#> 1     260 11 [Berlin]             \n#> 2   30699  5 [Nordrhein-Westfalen]\n#> 3  209604  6 [Hessen]             \n#> 4 1540064  8 [Baden-Württemberg]\n```\n:::\n\n```{.r .cell-code}\nalo_bula\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    bundesland Werte\n#> 1           1     i\n#> 2           2     k\n#> 3           3     w\n#> 4           4     e\n#> 5           5     a\n#> 6           6     q\n#> 7           7     s\n#> 8           8     o\n#> 9           9     v\n#> 10         10     x\n#> 11         11     l\n```\n:::\n\n```{.r .cell-code}\netb_ids %>% left_join(alo_bula,by = c(\"Bula\"=\"bundesland\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 3\n#>     intnr Bula                     Werte\n#>     <dbl> <dbl+lbl>                <chr>\n#> 1     260 11 [Berlin]              l    \n#> 2   30699  5 [Nordrhein-Westfalen] a    \n#> 3  209604  6 [Hessen]              q    \n#> 4 1540064  8 [Baden-Württemberg]   o\n```\n:::\n:::\n\n\nEin sehr hilfreiche Checkmöglichkeit, die ich häufig verwende:\nFür alle `Bula` in `etb_ids` findet sich eine Entsprechung in `alo$bundesland`:\n\n::: {.cell hash='07_data_wrangle3_cache/html/tabx_in_0b92daf09fb3ad11079ac10c9c6592e5'}\n\n```{.r .cell-code}\ntable(etb_ids$Bula %in% alo_bula$bundesland)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> TRUE \n#>    4\n```\n:::\n:::\n\n\n\n### [Übung](#join_ue)\n\n\n\n\n\n## Reshape: `pivot_longer()` & `pivot_wider()`\n\n\n::: {.cell hash='07_data_wrangle3_cache/html/unnamed-chunk-1_9af65797162b5b7d32bdcdfd29a5a28f'}\n\n:::\n\n\n## Übungen\n\n### Übung 1 {#join_ue}\n\n\n### Übung 2 {#pivot_ue}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}