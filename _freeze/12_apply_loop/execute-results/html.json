{
  "hash": "b61f1fcb974b6d0f1892ccf61130469a",
  "result": {
    "markdown": "# Schleifen & Funktionen\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\netbx <-  haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                         col_select = c(\"S1\",\"F518_SUF\",\"m1202\",\"az\",\"zpalter\",\"F1605e\",\"Bula\")) %>% \n  filter(F518_SUF < 99998, m1202 %in% 1:4, zpalter < 9999 ) %>% \n  mutate(ausb = factor(m1202, levels = 1:4, labels = c(\"ohne\",\"dual/schul.\",\"Aufst.\",\"FH/Uni\")),\n         S1 = factor(S1,levels = 1:2,labels =c(\"m\",\"w\")))\n```\n:::\n\n\nSchleifen im Sinne von `for()`-Loops werden in R selten verwendet. \nStattdessen werden meist Funktionen mit Hilfe von `lapply()` bzw. `map()` aus `{purrr}` über eine Reihe von Werten geschleift.\nDie grundlegende Idee ist zunächst die gleiche wie bei klassischen `for()`-Loops: wir definieren erst eine Serie an Werten, für dann eine Operation (eine `function()`) ausgeführt werden soll.\n\nGrundsätzlich können wir in R solche Schleife auf wirklich alles anwenden: `data.frames()`, Vektoren, `list`s.\nDas macht das Vorgehen sehr flexibel und kann uns beispielsweise helfen:\n\n+ alle Datensätze aus einem Verzeichnis einzulesen\n\n::: {.cell}\n\n```{.r .cell-code}\n# Namen aller csv-Dateien aus einem Verzeichnis\nfiles <- list.files(path = \"/pfad/...\", pattern = \".csv$\",full.names = T)\n\ndaten_list <- \n  map(files, function(x){\n    read.csv(x,header = T,sep = \";\")\n  })\n```\n:::\n\n\n+ Grafiken für unterschiedliche Jahre/Untergruppen zu erstellen\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplots_nach_Bula <- \n  map(1:16, function(bl){\n    plot_data <- etbx %>% filter(Bula == bl) # daten für Bundesland auswählen\n    title_var <- as_factor(unique(plot_data$Bula)) # Titel aus Bula-Variable \n      # eigentlicher plot\n    plot_data %>% \n      ggplot(aes(x=az,y=F518_SUF, color = S1)) +\n      geom_point() +\n      labs(title = title_var)\n  })\n\nplots_nach_Bula[[3]]\n```\n\n::: {.cell-output-display}\n![](12_apply_loop_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=55% height=45%}\n:::\n:::\n\n\n\n<!-- + Dateien zu verschieben... -->\n\n<!-- ```{r} -->\n<!-- #| eval: false -->\n\n<!-- files_to_move <- list.files(path = \"C:/....\",pattern = \"Namensbestandteil\") -->\n\n<!-- map(files_to_move,.f = function(x){ -->\n\n<!-- }) -->\n\n<!-- ``` -->\n\n+ Modellserien: Ein typisches Beispiel ist eine Modellserie. Wir möchten folgende Modelle schätzen:\n\n+ Modell 1 = `F518_SUF ~ az`\n+ Modell 2 = `F518_SUF ~ az + S1`\n+ Modell 3 = `F518_SUF ~ az + S1 + m1202`\n+ Modell 4 = `F518_SUF ~ az + S1 + m1202 + zpalter`\n\nNatürlich würde so etwas funktionieren, wäre aber ein Verstoß gegen das DRY-Prinzip[^dry] und anfällig für Vertipper:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- lm(F518_SUF ~ az, data = etbx)\nmod2 <- lm(F518_SUF ~ az + S1, data = etbx)\nmod3 <- lm(F518_SUF ~ az + S1 + m1202, data = etbx)\nmod4 <- lm(F518_SUF ~ az + S1 + m1202 + zpalter, data = etbx)\n```\n:::\n\n\n\n## Modelleserie als `function()` mit `lapply()` erstellen\n\nWir definieren dann eine `function()`, in der wir angeben, dass das angegebene Argument die Formel für ein `lm()` sein soll - das Ergebnis dieses `lm()` `lassen wir uns dann ausgeben.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_function <- function(modx){\n  mx <- lm(formula = modx,data = etbx)\n  return(mx)\n}\n```\n:::\n\n\nWenn wir jetzt in `mod_function` eine Modellformel angeben, wird ein `lm()` berechnet:\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_function(\"F518_SUF ~ az\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = modx, data = etbx)\n\nCoefficients:\n(Intercept)           az  \n     -371.3        102.1  \n```\n:::\n:::\n\nIm nächsten Schritt können wir jetzt eine Liste mit verschiedenen Modellvarianten erstellen:\n\n::: {.cell}\n\n```{.r .cell-code}\nmlst <- list(\n  \"Modell 1\" = \"F518_SUF ~ az\",\n  \"Modell 2\" = \"F518_SUF ~ az + S1\",\n  \"Modell 3\" = \"F518_SUF ~ az + S1 + m1202\",\n  \"Modell 4\" = \"F518_SUF ~ az + S1 + m1202 + zpalter\"\n)\n```\n:::\n\n\nWir können die Elemente einer `list()` entweder mit `[[]]` oder (ggf.) über ihren Namen aufrufen. Hier haben wir vor dem `=` einen Namen angegeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlst[[4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"F518_SUF ~ az + S1 + m1202 + zpalter\"\n```\n:::\n\n```{.r .cell-code}\nmlst$`Modell 4`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"F518_SUF ~ az + S1 + m1202 + zpalter\"\n```\n:::\n:::\n\n\n\n\nMit `lapply` wenden wir unsere `mod_function` jetzt auf diese Liste von Modellen an:\n\n::: {.cell}\n\n```{.r .cell-code}\nmods <- lapply(mlst,mod_function)\nmods$`Modell 1`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = modx, data = etbx)\n\nCoefficients:\n(Intercept)           az  \n     -371.3        102.1  \n```\n:::\n\n```{.r .cell-code}\nmods$`Modell 2`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = modx, data = etbx)\n\nCoefficients:\n(Intercept)           az          S1w  \n     359.51        91.73      -683.55  \n```\n:::\n:::\n\n\nAußerdem können wir uns alle Modelle auch direkt in `modelsummary` ausgeben lassen:\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelsummary::modelsummary(mods,stars = T,gof_omit = \"IC|RM|Log\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"NAborder-bottom: 0; width: auto !important; margin-left: auto; margin-right: auto;\" class=\"table\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> Modell 1 </th>\n   <th style=\"text-align:center;\">  Modell 2 </th>\n   <th style=\"text-align:center;\">  Modell 3 </th>\n   <th style=\"text-align:center;\">  Modell 4 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> -371.260*** </td>\n   <td style=\"text-align:center;\"> 359.515*** </td>\n   <td style=\"text-align:center;\"> -1526.254*** </td>\n   <td style=\"text-align:center;\"> -2609.682*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (89.299) </td>\n   <td style=\"text-align:center;\"> (106.687) </td>\n   <td style=\"text-align:center;\"> (118.849) </td>\n   <td style=\"text-align:center;\"> (153.625) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> az </td>\n   <td style=\"text-align:center;\"> 102.097*** </td>\n   <td style=\"text-align:center;\"> 91.733*** </td>\n   <td style=\"text-align:center;\"> 82.716*** </td>\n   <td style=\"text-align:center;\"> 83.152*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (2.234) </td>\n   <td style=\"text-align:center;\"> (2.376) </td>\n   <td style=\"text-align:center;\"> (2.321) </td>\n   <td style=\"text-align:center;\"> (2.313) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S1w </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> -683.549*** </td>\n   <td style=\"text-align:center;\"> -725.053*** </td>\n   <td style=\"text-align:center;\"> -755.165*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> (55.184) </td>\n   <td style=\"text-align:center;\"> (53.540) </td>\n   <td style=\"text-align:center;\"> (53.414) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> m1202 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> 797.911*** </td>\n   <td style=\"text-align:center;\"> 778.380*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> (24.734) </td>\n   <td style=\"text-align:center;\"> (24.706) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> zpalter </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> 24.282*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (2.194) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 16521 </td>\n   <td style=\"text-align:center;\"> 16521 </td>\n   <td style=\"text-align:center;\"> 16521 </td>\n   <td style=\"text-align:center;\"> 16521 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.112 </td>\n   <td style=\"text-align:center;\"> 0.120 </td>\n   <td style=\"text-align:center;\"> 0.173 </td>\n   <td style=\"text-align:center;\"> 0.179 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.112 </td>\n   <td style=\"text-align:center;\"> 0.120 </td>\n   <td style=\"text-align:center;\"> 0.172 </td>\n   <td style=\"text-align:center;\"> 0.178 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:center;\"> 2089.519 </td>\n   <td style=\"text-align:center;\"> 1131.116 </td>\n   <td style=\"text-align:center;\"> 1148.445 </td>\n   <td style=\"text-align:center;\"> 898.308 </td>\n  </tr>\n</tbody>\n<tfoot><tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001</td></tr></tfoot>\n</table>\n\n`````\n:::\n:::\n\n\n  \n## if in `function()`\n\nWir können unsere `function()` auch weitere Argumente aufnehmen und auch `if` und `else`-Statements einbauen. \nHier ein Beispiel: wenn wir das zweite Argument `add_age` auf `TRUE` setzen, wird der `add_controls` hinzugefügt:\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_controls <- c(\"+ zpalter + I(zpalter^2)\")\n\nmod_function2 <- function(modx, add_age){\n  if(add_age == T) {\n        mx <- lm(formula = paste0(modx,add_controls),data = etbx)\n  } else {\n        mx <- lm(formula = paste0(modx),data = etbx)\n  }\n  return(mx)\n}\n\nmod_function2(\"F518_SUF ~ az\",add_age=F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = paste0(modx), data = etbx)\n\nCoefficients:\n(Intercept)           az  \n     -371.3        102.1  \n```\n:::\n\n```{.r .cell-code}\nmod_function2(\"F518_SUF ~ az\",add_age=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = paste0(modx, add_controls), data = etbx)\n\nCoefficients:\n (Intercept)            az       zpalter  I(zpalter^2)  \n  -2498.4123      102.5538       66.6746       -0.4356  \n```\n:::\n:::\n\n\n\nWenn wir einen Standardwert für ein Argument vergeben möchten, dann können wir das mit `=` angeben.\nHier erweitern wir unsere Modellfunktion um einen `tidy()`-Schritt - der aber mit Hilfe einer Option `tidy_mod` ausgeschaltet werden kann, indem er auf `FALSE` gesetzt wird.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_function3 <- function(modx, tidy_mod = T){\n  mx <- lm(formula = modx,data = etbx)\n  if(tidy_mod == T) mx <- tidy(mx,conf.int = T)\n  return(mx)\n}\n\nmod_function3(\"F518_SUF ~ az\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 7\n  term        estimate std.error statistic   p.value conf.low conf.high\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>\n1 (Intercept)    -371.     89.3      -4.16 0.0000323   -546.      -196.\n2 az              102.      2.23     45.7  0             97.7      106.\n```\n:::\n\n```{.r .cell-code}\nmod_function3(\"F518_SUF ~ az\",tidy_mod = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = modx, data = etbx)\n\nCoefficients:\n(Intercept)           az  \n     -371.3        102.1  \n```\n:::\n:::\n\n\n\n\n## List zu `data.frame`\n\nWenn die Einzelbestandteile einer `list` bereits `data.frame`s sind, können wir mit `bind_rows()` diese zu einem `data.frame` zusammenfügen.\nMit `.id=\"\"` können wir eine Variable erstellen, welche die Listennamen enthält:\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_l3 <- lapply(mlst,mod_function3)\nlapply(mod_l3,class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Modell 1`\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$`Modell 2`\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$`Modell 3`\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$`Modell 4`\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(mod_l3,.id=\"Mod_name\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Mod_name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"term\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"std.error\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.low\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.high\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Modell 1\",\"2\":\"(Intercept)\",\"3\":\"-371.26019\",\"4\":\"89.299373\",\"5\":\"-4.157478\",\"6\":\"3.234030e-05\",\"7\":\"-546.29657\",\"8\":\"-196.22381\"},{\"1\":\"Modell 1\",\"2\":\"az\",\"3\":\"102.09694\",\"4\":\"2.233519\",\"5\":\"45.711259\",\"6\":\"0.000000e+00\",\"7\":\"97.71901\",\"8\":\"106.47488\"},{\"1\":\"Modell 2\",\"2\":\"(Intercept)\",\"3\":\"359.51468\",\"4\":\"106.686635\",\"5\":\"3.369819\",\"6\":\"7.538962e-04\",\"7\":\"150.39740\",\"8\":\"568.63197\"},{\"1\":\"Modell 2\",\"2\":\"az\",\"3\":\"91.73284\",\"4\":\"2.375515\",\"5\":\"38.615980\",\"6\":\"2.075463e-312\",\"7\":\"87.07657\",\"8\":\"96.38910\"},{\"1\":\"Modell 2\",\"2\":\"S1w\",\"3\":\"-683.54942\",\"4\":\"55.183805\",\"5\":\"-12.386776\",\"6\":\"4.411671e-35\",\"7\":\"-791.71562\",\"8\":\"-575.38322\"},{\"1\":\"Modell 3\",\"2\":\"(Intercept)\",\"3\":\"-1526.25378\",\"4\":\"118.848890\",\"5\":\"-12.841969\",\"6\":\"1.443352e-37\",\"7\":\"-1759.21040\",\"8\":\"-1293.29717\"},{\"1\":\"Modell 3\",\"2\":\"az\",\"3\":\"82.71634\",\"4\":\"2.320997\",\"5\":\"35.638285\",\"6\":\"4.565829e-268\",\"7\":\"78.16694\",\"8\":\"87.26574\"},{\"1\":\"Modell 3\",\"2\":\"S1w\",\"3\":\"-725.05330\",\"4\":\"53.540435\",\"5\":\"-13.542163\",\"6\":\"1.469230e-41\",\"7\":\"-829.99832\",\"8\":\"-620.10829\"},{\"1\":\"Modell 3\",\"2\":\"m1202\",\"3\":\"797.91149\",\"4\":\"24.733779\",\"5\":\"32.259991\",\"6\":\"1.792130e-221\",\"7\":\"749.43063\",\"8\":\"846.39236\"},{\"1\":\"Modell 4\",\"2\":\"(Intercept)\",\"3\":\"-2609.68200\",\"4\":\"153.624823\",\"5\":\"-16.987372\",\"6\":\"3.571520e-64\",\"7\":\"-2910.80319\",\"8\":\"-2308.56081\"},{\"1\":\"Modell 4\",\"2\":\"az\",\"3\":\"83.15229\",\"4\":\"2.312839\",\"5\":\"35.952476\",\"6\":\"1.330104e-272\",\"7\":\"78.61888\",\"8\":\"87.68570\"},{\"1\":\"Modell 4\",\"2\":\"S1w\",\"3\":\"-755.16488\",\"4\":\"53.413827\",\"5\":\"-14.138004\",\"6\":\"4.059609e-45\",\"7\":\"-859.86173\",\"8\":\"-650.46803\"},{\"1\":\"Modell 4\",\"2\":\"m1202\",\"3\":\"778.37971\",\"4\":\"24.706356\",\"5\":\"31.505242\",\"6\":\"1.282479e-211\",\"7\":\"729.95259\",\"8\":\"826.80682\"},{\"1\":\"Modell 4\",\"2\":\"zpalter\",\"3\":\"24.28233\",\"4\":\"2.193531\",\"5\":\"11.069974\",\"6\":\"2.207952e-28\",\"7\":\"19.98277\",\"8\":\"28.58189\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(mlst,mod_function3) %>% bind_rows(.id=\"Mod_name\")\n```\n:::\n\n\n\n\n\n## Modelle auf Subdatensets anwenden\n\n*\"Habt ihr das auch mal getrennt für Ost/West gerechnet?\"*\n\n\n::: {.cell}\n\n```{.r .cell-code}\netbx %>%\n  mutate(east = ifelse(Bula > 10,\"east\",\"west\")) %>% # Berlin = east\n  split(.$east) %>% \n  map(.,~lm(\"F518_SUF ~ az + ausb + zpalter + S1\",data = .x)) %>% \n  modelsummary::modelplot(.,coef_omit = \"Intercept\") +\n  geom_vline(aes(xintercept = 0), linetype = 2, alpha = .5) +\n  scale_color_manual(values = c(\"orange\",\"navy\")) \n```\n\n::: {.cell-output-display}\n![](12_apply_loop_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\netbx %>%\n  mutate(east = ifelse(Bula > 10,\"east\",\"west\")) %>% # Berlin = east\n  split(.$east) %>% \n  map(.,~lm(\"F518_SUF ~ az + ausb + zpalter + S1\",data = .x)) %>% \n  modelsummary::modelsummary(.,stars = T,gof_omit = \"IC|RM|Log\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"NAborder-bottom: 0; width: auto !important; margin-left: auto; margin-right: auto;\" class=\"table\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> east </th>\n   <th style=\"text-align:center;\"> west </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> -509.068 </td>\n   <td style=\"text-align:center;\"> -1731.303*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (380.613) </td>\n   <td style=\"text-align:center;\"> (187.221) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> az </td>\n   <td style=\"text-align:center;\"> 71.902*** </td>\n   <td style=\"text-align:center;\"> 88.157*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (5.374) </td>\n   <td style=\"text-align:center;\"> (2.562) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ausbdual/schul. </td>\n   <td style=\"text-align:center;\"> -345.508 </td>\n   <td style=\"text-align:center;\"> 425.407*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (283.463) </td>\n   <td style=\"text-align:center;\"> (124.716) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ausbAufst. </td>\n   <td style=\"text-align:center;\"> -75.817 </td>\n   <td style=\"text-align:center;\"> 936.694*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (329.344) </td>\n   <td style=\"text-align:center;\"> (151.324) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ausbFH/Uni </td>\n   <td style=\"text-align:center;\"> 1294.027*** </td>\n   <td style=\"text-align:center;\"> 2097.328*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (287.443) </td>\n   <td style=\"text-align:center;\"> (126.477) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> zpalter </td>\n   <td style=\"text-align:center;\"> 12.272** </td>\n   <td style=\"text-align:center;\"> 28.938*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (4.720) </td>\n   <td style=\"text-align:center;\"> (2.468) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S1w </td>\n   <td style=\"text-align:center;\"> -399.585*** </td>\n   <td style=\"text-align:center;\"> -830.732*** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (110.121) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (60.787) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 3438 </td>\n   <td style=\"text-align:center;\"> 13083 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.124 </td>\n   <td style=\"text-align:center;\"> 0.201 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.122 </td>\n   <td style=\"text-align:center;\"> 0.201 </td>\n  </tr>\n</tbody>\n<tfoot><tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001</td></tr></tfoot>\n</table>\n\n`````\n:::\n:::\n\n\n\n## adhoc function\n\nWir müssen aber nicht notwendigerweise erst eine Funktion definieren, um sie dann anzuwenden.\nWir können die Funktion auch im gleichen Zug wie `lapply()` definieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmods3 <- lapply(mlst,function(modx){\n  mx <- lm(formula = modx,data = etbx)\n  return(mx)\n})\nmods3$`Modell 1`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = modx, data = etbx)\n\nCoefficients:\n(Intercept)           az  \n     -371.3        102.1  \n```\n:::\n:::\n\n\n## Loop mit `for`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:8){\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n```\n:::\n:::\n\n\nKleines Beispiel: Zeile für Zeile der ersten 8 Zeilen aus etbx ausgeben:\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:8){\n  etbx %>% slice(i) %>% print()\n}\n```\n:::\n\n\n\n## Übungen\n\n\n::: {.cell}\n\n```{.r .cell-code}\netb_ue12 <- \n  haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                  col_select = c(\"S1\",\"F518_SUF\",\"m1202\",\"az\",\"zpalter\",\"F1605e\")) %>% \n  filter(F518_SUF < 99998, m1202 %in% 1:4, zpalter < 9999 ) %>% \n  mutate(ausb = factor(m1202, levels = 1:4, labels = c(\"ohne\",\"dual/schul.\",\"Aufst.\",\"FH/Uni\")),\n         S1 = factor(S1,levels = 1:2,labels =c(\"m\",\"w\")))\n```\n:::\n\n\n+ Erstellen Sie eine Funktion, welche den `data.frame` `etb_ue12` für ein `lm()` verwendet und als Input eine Modellformel verwendet. Testen Sie Ihre Funktion mit folgender Formel: `az ~ S1 + ausb + zpalter` (Denken Sie daran, die Formula in `\"\"` zu setzen).\n\n+ Erstellen Sie eine Liste mit folgenden Modellen:\n    +  Modell 1 `\"az ~ S1\",`\n    +  Modell 2 `\"az ~ S1 + ausb\",`\n    +  Modell 3 `\"az ~ S1 + ausb + zpalter\"`\n\n+ Verwenden Sie `lapply()` und die erstellte Funktion, um die Modelle zu schätzen und in `modelsummary()` anzuzeigen\n\n+ Erweitern Sie Ihre Funktion um ein zweites Argument `only_women`, welches über ein `TRUE` / `FALSE` steuert ob lediglich die Beobachtungen von weiblichen Befragten verwendet werden: `etb_ue12 %>% filter(S1 == \"w\")`. Legen Sie innerhalb der Funktion die entsprechenden Schritt mit einer `if`-Bedingung versehen.\n\n\n<!-- ### Übung  -->\n\n<!-- + Erstellen Sie folgende Modelle und wenden Sie diese mit Hilfe von `lapply()` auf den  -->\n\n\n## Anhang: Schleifen mit `{purrr}`\n\nIm `{tidyverse}` stellt das Paket `{purrr}` `map()` zur Verfügung, das `function(x) { ... x}` auf  `~` und `.x` abkürzen lässt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmods <- map(mlst,~lm(formula = .x,data = etbx))\n```\n:::\n\n\nSehr hilfreich ist `map_dfr`: hier wir aus dem Ergebnis der Schleife ein `data.frame`\" mit `row_bind()` erstellt.\nMit `.id =`  können wir eine Spalte erstellen, welche die Namen der Liste enthält (Hier die Modellnamen):\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dfr(mlst,~lm(formula = .x,data = etbx) %>% tidy(.),.id = \"mod\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 6\n   mod      term        estimate std.error statistic   p.value\n   <chr>    <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n 1 Modell 1 (Intercept)   -371.      89.3      -4.16 3.23e-  5\n 2 Modell 1 az             102.       2.23     45.7  0        \n 3 Modell 2 (Intercept)    360.     107.        3.37 7.54e-  4\n 4 Modell 2 az              91.7      2.38     38.6  2.08e-312\n 5 Modell 2 S1w           -684.      55.2     -12.4  4.41e- 35\n 6 Modell 3 (Intercept)  -1526.     119.      -12.8  1.44e- 37\n 7 Modell 3 az              82.7      2.32     35.6  4.57e-268\n 8 Modell 3 S1w           -725.      53.5     -13.5  1.47e- 41\n 9 Modell 3 m1202          798.      24.7      32.3  1.79e-221\n10 Modell 4 (Intercept)  -2610.     154.      -17.0  3.57e- 64\n11 Modell 4 az              83.2      2.31     36.0  1.33e-272\n12 Modell 4 S1w           -755.      53.4     -14.1  4.06e- 45\n13 Modell 4 m1202          778.      24.7      31.5  1.28e-211\n14 Modell 4 zpalter         24.3      2.19     11.1  2.21e- 28\n```\n:::\n:::\n\n\nWer mehr über `purrr` und `map()` erfahren möchte, findet [hier](https://hendrikvanb.gitlab.io/slides/purrr_beyond_map.html#1) eine hervorragende Einführung. \n\n\n### loop über Variablen\n\nMöchten wir über Variablen loopen, müssen wir R explizit mitteilen, dass die mitgegebenen strings als Variablen zu verstehen sind: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(v in c(\"ausb\",\"S1\",\"F1605e\")){\n  etbx %>% count(v) %>% print()\n}\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `count()`:\n! Must group by variables found in `.data`.\n✖ Column `v` is not found.\n```\n:::\n:::\n\n\nDas können wir mit `!!rlang::sym(v)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(v in c(\"ausb\",\"S1\",\"F1605e\")){\n  etbx %>% count(!!rlang::sym(v)) %>% print()\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  ausb            n\n  <fct>       <int>\n1 ohne          886\n2 dual/schul.  7679\n3 Aufst.       1460\n4 FH/Uni       6496\n# A tibble: 2 × 2\n  S1        n\n  <fct> <int>\n1 m      8442\n2 w      8079\n# A tibble: 4 × 2\n  F1605e                n\n  <dbl+lbl>         <int>\n1  1 [ja]            7104\n2  2 [nein]          3970\n3  9 [keine Angabe]    43\n4 NA                 5404\n```\n:::\n:::\n",
    "supporting": [
      "12_apply_loop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}