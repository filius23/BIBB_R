{
  "hash": "e4c232bd7330660ff1629f0b561bd84d",
  "result": {
    "markdown": "# Data Wrangling I: Labels {#wrang1}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\netb18_kap5 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                               col_select = c(\"intnr\", \"S1\", \"m1202\", \"Bula\",\"F411_01\")) %>% \n  filter(F411_01<9)\n```\n:::\n\n\n\n## Labels aus anderen Programmen in R\n\nWenn wir bspw. die Ansicht mit `View()` öffnen oder eine Auszählung mit `count()` erstellen, werden uns labels angezeigt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(etb18_kap5)\netb18_kap5 %>% count(S1)\n```\n:::\n\n\nDiese sind als `attributes()` Variablen zugeordnet:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(etb18_kap5$S1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$label\n[1] \"Geschlecht\"\n\n$format.stata\n[1] \"%8.0g\"\n\n$labels\nmännlich weiblich \n       1        2 \n\n$class\n[1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n```\n:::\n:::\n\n...leider machen die `attributes()` immer wieder Probleme:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggeasy)\n\netb18_kap5 %>% \n  count(S1) %>% \n  ggplot(.,aes(x=S1,y=n, fill = S1)) +\n  geom_col() + \n  easy_labs()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDon't know how to automatically pick scale for object of type\n<haven_labelled/vctrs_vctr/double>. Defaulting to continuous.\nDon't know how to automatically pick scale for object of type\n<haven_labelled/vctrs_vctr/double>. Defaulting to continuous.\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"rescale\"): nicht anwendbare Methode für 'rescale' auf Objekt der Klasse \"c('haven_labelled', 'vctrs_vctr', 'double')\" angewendet\n```\n:::\n:::\n\n\n\n## `factor` und Labels\n\nR verfügt über einen speziellen Variablentypen namens factor, um mit kategorialen Daten umzugehen. factor Variablen sind besonders hilfreich, wenn wir Grafiken erstellen wollen oder statistische Analysen durchführen. \n\nIn den beiden vorherigen Kapiteln haben wir schon gesehen, dass Labels in R immer etwas extra Aufwand bedeuten.\nIn Grafiken mussten wir mit `breaks = c(1,2), labels = c(\"Männer\", \"Frauen\")` die Labels extra erstellen.\nAuch in den Auszählungen waren die Labels nur mit `count()` aufrufbar. \n\nIn vielen Programmen wie Stata oder SPSS werden die labels häufig durch die Operationen \"mitgeschleift\" und dann ausgegeben. Das ist in R nicht der Fall. Stattdesssen können wir mit Hilfe des Variablentyps `factor` Labels vergeben. Das Vorgehen mag für alle, die schon lange mit Stata oder SPSS gearbeitet haben, etwas ungewöhnlich sein - ist aber in der Praxis sehr hilfreich, wenn man sich den entsprechenden Workflow angewöhnt hat.\n\nfactors stellen kategoriale Daten dar. Sie werden als Zahlen in Verbindung mit Bezeichnungen gespeichert und haben dazu eine festgelegte Ordnung.\nEinmal erstellt, können factors nur einen vordefinierten Satz von Werten enthalten, die als `levels` bezeichnet werden. Standardmäßig sortiert R die Ebenen immer in alphabetischer Reihenfolge.\n\nWir beginnen nochmal \"ganz von vorne\" und zwar mit einem `data.frame` aus `count()`:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_dat1 <- etb18_kap5 %>% count(m1202)\ntab_dat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  m1202                                                             n\n  <dbl+lbl>                                                     <int>\n1 -1 [keine Angabe]                                                44\n2  1 [Ohne Berufsabschluss]                                      1089\n3  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9294\n4  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725\n5  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7851\n```\n:::\n:::\n\n\nDabei soll `educ` die verschiedenen Ausbildungsniveaus entsprechend der Codierung von `m1202` repräsentieren:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> value </th>\n   <th style=\"text-align:left;\"> label </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> Ohne Berufsabschluss </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> duale o. schulische Berufsausbildung/einf.,mittl. Beamte </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> Fachhochschule, Universität/ geh., höhere Beamte </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\nWie können wir diese jetzt hinterlegen?\n\nSo könnten wir einfach eine `educ_chr`-Spalte hinzufügen:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_dat1$m1202_chr <- c(\"k.A.\",\"ohne Abs.\", \"dual/schul.\", \"Aufstiegsfortb.\", \"FH/Uni\")\ntab_dat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  m1202                                                             n m1202_chr \n  <dbl+lbl>                                                     <int> <chr>     \n1 -1 [keine Angabe]                                                44 k.A.      \n2  1 [Ohne Berufsabschluss]                                      1089 ohne Abs. \n3  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9294 dual/schu…\n4  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725 Aufstiegs…\n5  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7851 FH/Uni    \n```\n:::\n:::\n\n\nMit `factor()` können wir `levels` und `labels` angeben - die `labels` werden dann der Reihenfolge nach den Zahlen aus `levels` zugewiesen. Außerdem wird aus allen nicht angegebenen `levels` automatisch `NA`:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_dat1$m1202_fct <- factor(tab_dat1$m1202, \n                        levels = c(1,2,3,4), \n                        labels = c(\"ohne Abs.\", \"dual/schul.\", \"Aufstiegsfortb.\", \"FH/Uni\"))\ntab_dat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  m1202                                                        n m1202…¹ m1202…²\n  <dbl+lbl>                                                <int> <chr>   <fct>  \n1 -1 [keine Angabe]                                           44 k.A.    <NA>   \n2  1 [Ohne Berufsabschluss]                                 1089 ohne A… ohne A…\n3  2 [duale o. schulische Berufsausbildung/einf.,mittl. B…  9294 dual/s… dual/s…\n4  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB …  1725 Aufsti… Aufsti…\n5  4 [Fachhochschule, Universität/ geh., höhere Beamte]     7851 FH/Uni  FH/Uni \n# … with abbreviated variable names ¹​m1202_chr, ²​m1202_fct\n```\n:::\n:::\n\nWarum ist das besser als einfach ein `character`?\nWeil eine Reihenfolge festgelegt wird:\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(tab_dat1$m1202_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ohne Abs.\"       \"dual/schul.\"     \"Aufstiegsfortb.\" \"FH/Uni\"         \n```\n:::\n:::\n\n\nWenn wir dann `tab_dat1` in einen ggplot pipen, dann werden die Werte der Reihenfolge der `levels` entsprechend auf der x-Achse sortiert:\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='05_data_wrangle1_cache/html/chr_fct_plot_3ec609a584dab0c715fff72f0d32dfcb'}\n\n```{.r .cell-code}\ntab_dat1 %>% \n  ggplot(data = ., aes(x = m1202_chr, y = n)) +\n  geom_col(position=position_dodge(), fill = \"mediumturquoise\")\n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/chr_fct_plot-1.png){fig-align='center' width=60% height=60%}\n:::\n\n```{.r .cell-code}\ntab_dat1 %>% \n  ggplot(data = ., aes(x = m1202_fct, y = n)) +\n  geom_col(position=position_dodge(), fill = \"steelblue4\") \n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/chr_fct_plot-2.png){fig-align='center' width=60% height=60%}\n:::\n:::\n\n\n**[Blogbeitrag zu labels in R](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/)**\n\n## Übung\n\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_ue5 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n                               col_select = c(\"intnr\", \"S1\", \"m1202\", \"Bula\",\"F411_01\")) %>% \n  filter(F411_01<9)\n```\n:::\n\n\nBearbeiten Sie die labels dieses Diagramms:\n\n**`F411_01`: Wie häufig kommt es vor, dass Sie unter starkem Termin- oder Leistungsdruck arbeiten?**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> value </th>\n   <th style=\"text-align:left;\"> label </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> häufig </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> manchmal </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> selten </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> nie </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\netb18_ue5 %>% \n  count(F411_01) %>%\n  ggplot(data = ., aes(x = F411_01, y = n)) +\n  geom_col(fill = \"steelblue3\")\n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/unnamed-chunk-13-1.png){width=50% height=50%}\n:::\n:::\n\n\n+ Erstellen Sie dafür zunächst einen `data.frame` mit der Auszählung durch `count()` und legen diese als Objekt ab.\n+ Erstellen Sie einen `factor()` Variable mit den den gewünschten Beschriftungen mit Hilfe von `labels =`. (Sie können die Labels der Variable `F411_01` mit `attributes(etb18_kap5$F411_01)$labels` nachsehen.) \n+ Verwenden Sie die gelabelten Variablen für die Grafik.\n\n\n## Anhang\n\n### Labels löschen mit `zap_...` aus `{haven}`\n\nHäufig führen die Label-`attributes()` zu Problemen in der weiteren Verarbeitung.\nMit `haven::zap_labels()` können wir die Value labels aus einem Datensatz köschen mit `haven::zap_label()` können wir die Variable labels entfernen.\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_kap5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20,003 × 5\n   intnr Bula        S1           F411_01      m1202                            \n   <dbl> <dbl+lbl>   <dbl+lbl>    <dbl+lbl>    <dbl+lbl>                        \n 1   260 11 [Berlin] 1 [männlich] 1 [häufig]   4 [Fachhochschule, Universität/ …\n 2   361 11 [Berlin] 2 [weiblich] 2 [manchmal] 2 [duale o. schulische Berufsaus…\n 3   491 11 [Berlin] 1 [männlich] 2 [manchmal] 4 [Fachhochschule, Universität/ …\n 4   690 11 [Berlin] 2 [weiblich] 2 [manchmal] 4 [Fachhochschule, Universität/ …\n 5   919 11 [Berlin] 2 [weiblich] 2 [manchmal] 2 [duale o. schulische Berufsaus…\n 6  1041 11 [Berlin] 1 [männlich] 1 [häufig]   2 [duale o. schulische Berufsaus…\n 7  1077 11 [Berlin] 1 [männlich] 2 [manchmal] 4 [Fachhochschule, Universität/ …\n 8  1306 11 [Berlin] 2 [weiblich] 3 [selten]   2 [duale o. schulische Berufsaus…\n 9  1357 11 [Berlin] 2 [weiblich] 1 [häufig]   4 [Fachhochschule, Universität/ …\n10  1488 11 [Berlin] 2 [weiblich] 1 [häufig]   4 [Fachhochschule, Universität/ …\n# … with 19,993 more rows\n```\n:::\n\n```{.r .cell-code}\netb18_kap5 %>% \n  haven::zap_labels() # value labels raus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20,003 × 5\n   intnr  Bula    S1 F411_01 m1202\n   <dbl> <dbl> <dbl>   <dbl> <dbl>\n 1   260    11     1       1     4\n 2   361    11     2       2     2\n 3   491    11     1       2     4\n 4   690    11     2       2     4\n 5   919    11     2       2     2\n 6  1041    11     1       1     2\n 7  1077    11     1       2     4\n 8  1306    11     2       3     2\n 9  1357    11     2       1     4\n10  1488    11     2       1     4\n# … with 19,993 more rows\n```\n:::\n:::\n\n\n\n### `as_factor()` in `{haven}` {#as_fct}\n\nIn `{haven}` findet sich die Funktion `as_factor`[^2], mit der wir aus Labels einen `factor` erstellen können.\n\n[^2]: Nicht zu verwechseln mit `as.factor()` aus base R - der `_` macht einen Unterschied!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(labelled)\ntab_dat2 <- etb18_kap5 %>% count(Bula)\ntab_dat2$Bula_fct <- as_factor(tab_dat2$Bula)\ntab_dat2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 3\n   Bula                            n Bula_fct              \n   <dbl+lbl>                   <int> <fct>                 \n 1  1 [Schleswig-Holstein]       687 Schleswig-Holstein    \n 2  2 [Hamburg]                  553 Hamburg               \n 3  3 [Niedersachsen]           1863 Niedersachsen         \n 4  4 [Bremen]                   172 Bremen                \n 5  5 [Nordrhein-Westfalen]     3661 Nordrhein-Westfalen   \n 6  6 [Hessen]                  1404 Hessen                \n 7  7 [Rheinland-Pfalz]          851 Rheinland-Pfalz       \n 8  8 [Baden-Württemberg]       2402 Baden-Württemberg     \n 9  9 [Bayern]                  4049 Bayern                \n10 10 [Saarland]                 207 Saarland              \n11 11 [Berlin]                  1198 Berlin                \n12 12 [Brandenburg]              589 Brandenburg           \n13 13 [Mecklenburg-Vorpommern]   358 Mecklenburg-Vorpommern\n14 14 [Sachsen]                 1003 Sachsen               \n15 15 [Sachsen-Anhalt]           500 Sachsen-Anhalt        \n16 16 [Thüringen]                506 Thüringen             \n```\n:::\n:::\n\n\nDas können wir dann in den Plot pipen:\n<!-- - mit `str_wrap( , 10)` aus [{stringr}](https://stringr.tidyverse.org/) (aus [{tidyverse}](https://www.tidyverse.org/)) können wir außerdem festlegen, dass nach 10 Zeichen ein Zeilenumbruch eingefügt werden soll: -->\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_dat2 %>% \n  ggplot(data = ., aes(y = Bula_fct, x = n)) +\n  geom_col(position=position_dodge(), fill = \"sienna1\")\n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### `factor` Variablen bearbeiten mit `{forcats}`\n\n\n`{forcats}` ist Teil des `{tidyverse}`.\nMit `fct_recode()` können wir die `levels` verändern:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_dat2$Bula_fct2 <- fct_recode(tab_dat2$Bula_fct,\n  NRW = \"Nordrhein-Westfalen\",\n  `M V` = \"Mecklenburg-Vorpommern\", # bei Leerzeichen `` um die Wörter\n  )\ntab_dat2 %>% print(n=Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 4\n   Bula                            n Bula_fct               Bula_fct2         \n   <dbl+lbl>                   <int> <fct>                  <fct>             \n 1  1 [Schleswig-Holstein]       687 Schleswig-Holstein     Schleswig-Holstein\n 2  2 [Hamburg]                  553 Hamburg                Hamburg           \n 3  3 [Niedersachsen]           1863 Niedersachsen          Niedersachsen     \n 4  4 [Bremen]                   172 Bremen                 Bremen            \n 5  5 [Nordrhein-Westfalen]     3661 Nordrhein-Westfalen    NRW               \n 6  6 [Hessen]                  1404 Hessen                 Hessen            \n 7  7 [Rheinland-Pfalz]          851 Rheinland-Pfalz        Rheinland-Pfalz   \n 8  8 [Baden-Württemberg]       2402 Baden-Württemberg      Baden-Württemberg \n 9  9 [Bayern]                  4049 Bayern                 Bayern            \n10 10 [Saarland]                 207 Saarland               Saarland          \n11 11 [Berlin]                  1198 Berlin                 Berlin            \n12 12 [Brandenburg]              589 Brandenburg            Brandenburg       \n13 13 [Mecklenburg-Vorpommern]   358 Mecklenburg-Vorpommern M V               \n14 14 [Sachsen]                 1003 Sachsen                Sachsen           \n15 15 [Sachsen-Anhalt]           500 Sachsen-Anhalt         Sachsen-Anhalt    \n16 16 [Thüringen]                506 Thüringen              Thüringen         \n```\n:::\n:::\n\n\n[Weitere `fct_....()` Funktionen aus `{forcats}`](#fct_cats), einen Überblick gibt das [Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf).\n\nEine sehr praktische Funktion ist `fct_reorder()`, mit dieser können wir die levels nach Häufigkeit (aus `tab_dat1$n`) sortieren:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_dat2$Bula_fct3 <- fct_reorder(tab_dat2$Bula_fct2,tab_dat2$n)\nlevels(tab_dat2$Bula_fct2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Schleswig-Holstein\" \"Hamburg\"            \"Niedersachsen\"     \n [4] \"Bremen\"             \"NRW\"                \"Hessen\"            \n [7] \"Rheinland-Pfalz\"    \"Baden-Württemberg\"  \"Bayern\"            \n[10] \"Saarland\"           \"Berlin\"             \"Brandenburg\"       \n[13] \"M V\"                \"Sachsen\"            \"Sachsen-Anhalt\"    \n[16] \"Thüringen\"         \n```\n:::\n\n```{.r .cell-code}\nlevels(tab_dat2$Bula_fct3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Bremen\"             \"Saarland\"           \"M V\"               \n [4] \"Sachsen-Anhalt\"     \"Thüringen\"          \"Hamburg\"           \n [7] \"Brandenburg\"        \"Schleswig-Holstein\" \"Rheinland-Pfalz\"   \n[10] \"Sachsen\"            \"Berlin\"             \"Hessen\"            \n[13] \"Niedersachsen\"      \"Baden-Württemberg\"  \"NRW\"               \n[16] \"Bayern\"            \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ntab_dat2 %>% \n  ggplot(data = ., aes(y = Bula_fct2, x = n)) +\n  geom_col(position=position_dodge(), fill = \"turquoise2\")\n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntab_dat2 %>% \n  ggplot(data = ., aes(y = Bula_fct3, x = n)) +\n  geom_col(position=position_dodge(), fill = \"turquoise3\")\n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n### Labels selbst erstellen und ranspielen\n\nEin alternativer Weg geht über einen kleinen Label-`data.frame` und `left_join()` (mehr zu `left_join()` später.)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_ausb2 <- etb18_kap5 %>% count(m1202)\ntab_ausb2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  m1202                                                             n\n  <dbl+lbl>                                                     <int>\n1 -1 [keine Angabe]                                                44\n2  1 [Ohne Berufsabschluss]                                      1089\n3  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9294\n4  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725\n5  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7851\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlab_df <- data.frame(m1202=1:4)\nlab_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  m1202\n1     1\n2     2\n3     3\n4     4\n```\n:::\n\n```{.r .cell-code}\nlab_df$m1202_lab <- factor(lab_df$m1202,levels = 1:4,\n                           labels = c(\"ohne Abs.\", \"dual/schul.\", \"Aufstiegsfortb.\", \"FH/Uni\"))\nlab_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  m1202       m1202_lab\n1     1       ohne Abs.\n2     2     dual/schul.\n3     3 Aufstiegsfortb.\n4     4          FH/Uni\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_ausb2 %>% \n  left_join(lab_df,by = \"m1202\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  m1202                                                             n m1202_lab \n  <dbl+lbl>                                                     <int> <fct>     \n1 -1 [keine Angabe]                                                44 <NA>      \n2  1 [Ohne Berufsabschluss]                                      1089 ohne Abs. \n3  2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamte]  9294 dual/schu…\n4  3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.)]  1725 Aufstiegs…\n5  4 [Fachhochschule, Universität/ geh., höhere Beamte]          7851 FH/Uni    \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_ausb2 %>% \n  left_join(lab_df,by = \"m1202\") %>% \n  ggplot(data = ., aes(x = m1202_lab, y = n)) +\n  geom_col(position=position_dodge(), fill = \"turquoise3\")\n```\n\n::: {.cell-output-display}\n![](05_data_wrangle1_files/figure-html/unnamed-chunk-25-1.png){width=80% height=50%}\n:::\n:::\n\n\n\n\n### Labels in R erstellen und nach bspw. Stata exportieren\nWenn wir aber beispielsweise einen Datensatz für Stata labeln wollen, hilft uns wieder `{labelled}`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(labelled)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_kap5$S1_num2 <- as.numeric(etb18_kap5$S1)\nattributes(etb18_kap5$S1_num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nval_labels(etb18_kap5$S1_num2) <- c(\"Mann\"=1,\"Frau\"=2)\nattributes(etb18_kap5$S1_num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$labels\nMann Frau \n   1    2 \n\n$class\n[1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n```\n:::\n\n```{.r .cell-code}\netb18_kap5 %>% count(S1_num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  S1_num2       n\n  <dbl+lbl> <int>\n1 1 [Mann]  10068\n2 2 [Frau]   9935\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\netb18_kap5 %>% \n  select(S1_num2) %>% \n  haven::write_dta(.,path = \"./data/etb18_kap5.dta\")\n```\n:::\n\n\n...in *Stata*:\n\n::: {.cell}\n\n```{.stata .cell-code}\nuse \"./data/etb18_kap5.dta\" \ntab S1_num2\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n    S1_num2 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n       Mann |     10,068       50.33       50.33\n       Frau |      9,935       49.67      100.00\n------------+-----------------------------------\n      Total |     20,003      100.00\n```\n:::\n:::\n\n\n[Mehr zu `labels` in `{labelled}`](https://joseph.larmarange.net/intro_labelled.html).\n\n\n<!-- factors stellen eine strukturierte Beziehung zwischen den verschiedenen Ebenen (Werten) einer kategorialen Variable her, wie z. B. Wochentage oder Antworten auf eine Frage in einer Umfrage. Auf diese Weise lässt sich leichter erkennen, wie sich ein Element zu den anderen Elementen in einer Spalte verhält. Obwohl factors wie Zeichenvektoren aussehen (und sich oft auch so verhalten), werden sie von R als Ganzzahlvektoren behandelt. Sie müssen also sehr vorsichtig sein, wenn Sie sie als Strings behandeln. -->\n\n<!-- Einmal erstellt, können factors nur einen vordefinierten Satz von Werten enthalten, die als Ebenen bezeichnet werden. Standardmäßig sortiert R die Ebenen immer in alphabetischer Reihenfolge. Wenn Sie zum Beispiel einen Faktor mit 2 Ebenen haben: -->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}