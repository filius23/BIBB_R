{
  "hash": "830cbfd5d5abed198ea8355c84ba105f",
  "result": {
    "markdown": "# Visualisierung mit `{ggplot2}`\n\n\n\n\n\n\nNeben Kennzahlen/Tabellen können/sollten Verteilungen auch visualisiert werden. \nDafür bietet `{ggplot2}` eine riesige Auswahl an Möglichkeiten. \n\n`{ggplot2}` ist Teil des `{tidyverse}`, d.h. wir können entweder nur `{ggplot2}` oder die gesamte `{tidyverse}`-Sammlung laden:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-1_70560bddd17c521258902b1cd10626ef'}\n\n```{.r .cell-code}\nlibrary(haven) # für datenimport\nlibrary(tidyverse)\n# library(ggplot2) # nicht nötig wenn tidyverse geladen\n```\n:::\n\n\n\nZunächst sehen wir uns den Weg zu einem Scatterplot an:\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-2_a5d855e23a55b01a45873b109851ca79'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80% height=80%}\n:::\n:::\n\n\nDatengrundlage für unsere Graphik ist die ETB18 mit den Angaben zur Arbeitszeit sowie dem Geschlecht und Alter der Befragten:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-3_0663bb2a64264d145bb33663b45acf72'}\n\n```{.r .cell-code}\netb18 <- read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-4_3fe937b7e5327ee99893a15874e4caf0'}\n\n```{.r .cell-code}\netb18 %>% select(az,S1,zpalter) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     az S1           zpalter  \n  <dbl> <dbl+lbl>    <dbl+lbl>\n1    80 1 [männlich] 41       \n2    30 2 [weiblich] 51       \n3    40 1 [männlich] 49       \n4    40 2 [weiblich] 63       \n5    39 2 [weiblich] 41       \n6    40 1 [männlich] 57       \n```\n:::\n:::\n\n\nUm die Grafik nicht zu groß zu machen, verwenden wir nur die ersten 100 Beobachtungen:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-5_46564853d8c75c50c24266aee8bd3dbf'}\n\n```{.r .cell-code}\netb18$zpalter[etb18$zpalter>100] <- NA # missing in zpalter mit NA überschreiben\netb18_small <- etb18 %>% slice(1:100)\n```\n:::\n\n\n\n## ggplot2 und die grammar of graphics \n\nNach der Installation und der Aktivierung von `{ggplot2}` können wir uns der Logik dieses Pakets widmen. \n`ggplot2` ist die Umsetzung des Konzepts der \"layered grammar of graphics\" in R. Die Idee dieses Visualisierungssystems ist es, Datenvisualisierung in Parameter zu unterteilen: der zugrundeliegende Datensatz, die darzustellenden Variablen, die Wahl der darzustellenden Formen, das Koordinatensystem, Skalen und statistische Transformationen. Ein Standardbefehl in `ggplot2` sieht ungefähr so aus:\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-6_fe71e911d69ffcffef02b9e442f00fc5'}\n\n```{.r .cell-code}\nggplot(data = datensatz, aes(x = var1, y = var2, color = var3)) +\n  geom_point() +\n  labs(title= \"Titel\", subtitle = \"Untertitel\") +\n  theme_minimal()\n```\n:::\n\nWir rufen also zunächst mit `ggplot()` eine Darstellung auf. In den weiteren Argumenten werden dann weitere Aspekte festgelegt:  \n\n+ Mit `data = ` geben wir den `data.frame` an, den wir darstellen möchten\n+ Die Aesthetics `aes()` legen fest, welche Variablen dargestellt werden sollen: hier also `var1` auf der x-Achse, `var2` auf der y-Achse und `var3` soll die Farbgebung festlegen\n+ Die Layers `geom_..` geben die Art der Darstellung an, zB. `geom_point()` für Punkt- und `geom_bar()` für Säulendiagramme.\n+ Mit `labs` können wir Beschriftungen angeben, zB. einen Titel vergeben oder die Achsenbeschriftungen anpassen\n+ Die Themes `theme_...` legen das Design der Graphik fest, zB. schwarz/weiße Achsen- und Hintergrundfarben mit  `theme_bw()`\n\nWir arbeiten uns also jetzt durch die einzelnen *layer*/Schichten der Grafik:\n\n### `data =`\n\nIn `data = ` geben die den `data.frame` an, aus dem die darzustellenden Informationen kommen. Wir starten unseren ggplot also mit:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-7_6e5ad00d98a6a975239cad5c18c0beb2'}\n\n```{.r .cell-code}\nggplot(data = etb18_small)\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n### `aes` \n\nDiese Werte wollen wir also in einem Scatterplot darstellen, sodass das Alter auf der x-Achse und auf der y-Achse die Wochenarbeitszeit abgetragen ist:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-8_a8470dc3f3a56bf55c610a6ca2cc25b1'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az))\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n### `geom`\nWenn wir nur diese Angaben machen, bekommen wir lediglich ein leeres Koordinatensystem - warum? Weil wir noch nicht angegeben haben, welche *Form* der Darstellung wir gerne möchten. Dazu muss wir ein `geom_` angeben, für Säulendiagramme ist das `geom_col()`, diese hängen wir an den `ggplot`-Befehl mit `+` an:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-9_2e1d43a20a127e60dcce56435da6eefc'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\nMit `color =` können wir den Punkten auch eine andere Farbe geben:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-10_8ce9155fd6586351600447948b83d530'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az)) + geom_point(color = \"orange\")\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n### `aes()` Teil II\nDas sieht soweit schon ganz gut aus, allerdings werden die Punkte noch nicht getrennt nach Geschlecht dargestellt. \nDazu müssen wir die Geschlechtsangabe (`S1`) in `aes()` angeben.\nNeben den Achsen werden in `aes()` nämlich auch die Variablen für das Aussehen der `geom_`s angeben - das kann neben der Farbe auch die Form, Größe oder Transparenz sein. [Hier ein Überblick](#aes)\n\nDas Geschlecht soll die Färbung der Punkte vorgeben, diese können wir in `aes` mit `color` angeben:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-11_2dffe38b25495f25aeb92ea3cc6b695f'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = S1 )) + \n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"rescale\"): nicht anwendbare Methode für 'rescale' auf Objekt der Klasse \"c('haven_labelled', 'vctrs_vctr', 'double')\" angewendet\n```\n:::\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = as.numeric(S1))) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-11-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nAußerdem können wir mit `scale_color_manual`[^2] selbst Farben angeben, eine Liste möglicher Farben findet sich [**hier**](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf).\n\n[^2]: Hätten wir `color` in `aes`  angeben, wäre der entsprechende Befehl `scale_color_manual`.\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-12_79fdef7edd61ab7cf9f7a50524a9938b'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point() + \n  scale_color_manual(values = c(\"lightskyblue4\",\"navy\"))\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n### Beschriftungen\n\nWir können mit den Optionen `breaks` und `labels` zudem auch die Beschriftung der Legende bearbeiten. Dazu geben wir zunächst in `breaks`  die Ausprägungen der Variable Geschlecht an und dann in der gleichen Reihenfolge die zu vergebenden Labels:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-13_b308d22618790c82479651b8ec1bcc03'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point() + \n  scale_color_manual(values = c(\"lightskyblue4\",\"navy\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") )\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=75% height=75%}\n:::\n:::\n\nAbschließend passen wir dann noch mit `labs` die Beschriftungen an, dabei haben wir folgende Optionen:\n\n+ `title`: Überschrift für die Graphik\n+ `subtitle`:  Unterzeile zur Überschrift\n+ `caption`: Anmerkung unterhalb der Graphik\n+ `x`: x-Achsenbeschriftung\n+ `y`: y-Achsenbeschriftung\n+ `fill`: Beschriftung für die Legende, wenn `fill` in `aes()` angegeben wurde\n+ `color`: Beschriftung für die Legende, wenn `color` in `aes()` angegeben wurde\n\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/fullplt_15afa15b215fad52280f77463b92ea9b'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point() + \n  scale_color_manual(values = c(\"lightskyblue4\",\"navy\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) +\n  labs(color = \"Geschlecht\", y = \"Arbeitszeit/Woche\",\n       x = \"Alter\",\n       title = \"Arbeitszeit und Alter\",\n       subtitle = \"Nach Geschlecht\",\n       caption = \"Quelle: ETB 2018\"\n       ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/fullplt-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\nAußerdem können wir mit `theme_` ein anderes Design auswählen, zB. mit `theme_minimal()` einen weißen Hintergrund mit grauen Markierungslinien (weitere Beispiele in den Hinweisen unter [Themes](#themes))\n\n## Plots als Objekte\n\n\nAußerdem kann ein ggplot auch ein Objekt sein:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-14_99686c325e8a72b39fb51513281c873e'}\n\n```{.r .cell-code}\np1 <- ggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point(size = 2) \n\np1 + scale_color_manual(values = c(\"lightskyblue3\",\"navy\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\np1 + scale_color_manual(values = c(\"coral\",\"orange\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-14-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n## Kombination aus allem\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/fllplt1_3367d19bc7de31a50085bef4e92fd062'}\n\n```{.r .cell-code}\netb18_small$m1202[etb18_small$m1202<0] <- NA\nggplot(data = etb18_small, aes(x = zpalter, y = az, \n                               color = factor(S1),\n                               shape = factor(m1202))) + \n  geom_point(size = 2) + \n  scale_color_manual(values = c(\"lightskyblue3\",\"navy\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) +\n  scale_shape_manual(values = c(15:18),breaks = c(1:4), \n                     labels = c(\"ohne Aus\", \"duale Ausb.\",\"Aufstiegsfortb.\",\"FH/Uni\")) +\n  labs(color = \"Geschlecht\", \n       shape = \"Ausbildung\",\n       fill = \"Geschlecht\",\n       y = \"Arbeitszeit/Woche\",\n       x = \"Alter\",\n       title = \"Arbeitszeit und Alter\",\n       subtitle = \"Nach Geschlecht\",\n       caption = \"Quelle: ETB 2018\"\n       ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/fllplt1-1.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n[Übersicht zu shapes](#shape1)\n\n## `ggsave()`\n\nUm eine Grafik dann zu speichern, steht uns `ggsave()` zur Verfügung.\nWenn wir nichts anderes angeben, wird automatisch die gerade offene Grafik[^plotopen] gespeichert. \nBesser ist es aber explizit zu sein:\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-15_883ed2ba25d7b02b3b5ad0a0671b629e'}\n\n```{.r .cell-code}\nplot_objekt1 <- ggplot(data = etb18_small, aes(x = zpalter, y = az, \n                               color = factor(S1),\n                               shape = factor(m1202))) + \n  geom_point(size = 2) + \n  scale_color_manual(values = c(\"lightskyblue3\",\"navy\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) +\n  scale_shape_manual(values = c(15:18),breaks = c(1:4), \n                     labels = c(\"ohne Aus\", \"duale Ausb.\",\"Aufstiegsfortb.\",\"FH/Uni\")) +\n  labs(color = \"Geschlecht\",shape = \"Ausbildung\", fill = \"Geschlecht\",\n       y = \"Arbeitszeit/Woche\",x = \"Alter\",\n       title = \"Arbeitszeit und Alter\", subtitle = \"Nach Geschlecht\",caption = \"Quelle: ETB 2018\") \n```\n:::\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-16_48a34f28c1491998a83749de1334139a'}\n\n```{.r .cell-code}\nggsave(plot = plot_objekt1,filename = \"./grafik/plot1.png\",\n       dpi = 800, # auflösung\n       # width = 9, height = 7, # falls angepasst werden soll\n       )\n```\n:::\n\nDie richtige Kombination aus Auflösung, Textgröße und Gesamtgröße des Plots zu finden hat einige Fallstricke. [Hier mehr dazu.](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/)\n\n\n[^plotopen]: im Panel **Plots** rechts\n\n### [Übung](#pltue1)  {#ue4_01}\n\n## Labels übernehmen\n\nWenn(!) die labels und Variablenformate passen, dann hilft uns `easy_labs()` aus [{ggeasy}](https://jonocarroll.github.io/ggeasy/) weiter:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-17_fe74b5ee8ca7c52ff21e4cc4672629f3'}\n\n```{.r .cell-code}\ninstall.packages(\"ggeasy\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-18_af0467d5caeed1004357b254c734a2fd'}\n\n```{.r .cell-code}\nlibrary(ggeasy)\netb18_small$S1 <- factor(etb18_small$S1)\nggplot(data = etb18_small, aes(x = zpalter, \n                               y = az)) + \n  geom_point(size = 2) + \n  easy_labs()\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n\n\n\n## Verteilungen visualisieren\n\n### Boxplot \n\nDefinition der Bestandteile eines Boxplots: \n\n<!-- + ggf. Ausreißer -->\n<!-- + unterer Whisker: `q1 - 1.5* IQR` -->\n<!-- + untere Grenze: 1. Quartil  -->\n<!-- + mittlere Linie: Median  -->\n<!-- + obere Grenze: 3. Quartil  -->\n<!-- + oberer Whisker: `q3 + 1.5* IQR` -->\n<!-- + ggf. Ausreißer -->\n\n<!-- Die Box enthält also die zentralen 50% des Wertebereichs. -->\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/sw05_boxplot1_84ddc35db1fc5b557a0dfd8db0cee4cb'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/sw05_boxplot1-1.png){fig-align='center' width=55% height=45%}\n:::\n:::\n\n\nMit der folgenden Syntax können wir mit `ggplot2` einen Boxplot erstellen. Da wir nur eine Variable betrachten, müssen wir lediglich `y = ` oder `x =` angeben - je nachdem ob die Box vertikal oder horizontal orientiert sein soll.\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-19_7d81baec03438eb94029f79f3ea26bf1'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(y = az)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nSo können wir einen Boxplot erstellen, der die Werte für Männer und Frauen getrennt darstellt: \n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-20_77328256b019ae98b4849b25f87d750a'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(y = az, x = factor(S1))) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n### Histogram \n\nEbenso können Verteilungen mit einem Histogramm beschrieben werden:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-21_38f9a76a804dd60810a156ddac69a452'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = az)) + \n  geom_histogram()  \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nWenn wir hier die Farbe ändern möchten, dann ist `fill =` anstelle von `color =` die richtige Option:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-22_09700ac2789149fd7d44e623697ce957'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = az)) + \n  geom_histogram(fill = \"sienna1\")  \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nMöchten wir das Histogramm nach Geschlecht aufsplitten, können wir auch hier wieder `fill` als Aesthetic angeben. Mit `position = position_dodge()` können wir die Balken nebeneinander stellen lassen:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/hist0_72180cc1f2871299decfe1565cce83bc'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = az, fill = factor(S1))) + \n  geom_histogram() \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/hist0-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = az, fill = factor(S1))) + \n  geom_histogram(position = position_dodge()) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/hist0-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nAuch hier funktionieren natürlich wieder die `scale_...manual` Befehle, allerdings hier als `scale_fill_manual` anstelle `scale_color_manual` von oben:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/hist1_0372931e1eab13228cf3c990db506dac'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = az, fill = factor(S1))) + \n  geom_histogram(position = position_dodge()) +\n  scale_fill_manual(values = c(\"sienna1\",\"dodgerblue4\"),\n                    breaks = 1:2, labels = c(\"Männer\",\"Frauen\")) +\n  labs(fill = \"Geschlecht\")\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/hist1-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\nggplot(data = etb18, aes(x = az)) + \n  geom_histogram(aes(fill = factor(S1)), color = \"grey50\",position = position_dodge()) + \n  scale_fill_viridis_d(option = \"E\",labels = c(\"Männer\",\"Frauen\"))\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/hist1-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nWir können das ganze auch als Density-Plot darstellen `geom_density()`, hier empfiehlt es sich aber mit `alpha =` die Deckkraft herunterzusetzen:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/dens_4bc68d89e5d48bf737ef636969cce6d7'}\n\n```{.r .cell-code}\nggplot(data = etb18, aes(x = az,fill = factor(S1))) + \n  geom_density(alpha = .5) + \n  scale_fill_manual(values = c(\"sienna1\",\"dodgerblue4\"),\n                    breaks = 1:2, labels = c(\"Männer\",\"Frauen\")) +\n  labs(fill = \"Geschlecht\") \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/dens-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n### [Übung](#pltue2) {#ue4_02}\n\n## Kategoriale Merkmale \n\nIm Folgenden sehen wir uns eine Möglichkeit an, die Kontingenztabelle aus [Kapitel 2](03_desc.qmd#crosscount) zu visualisieren:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-23_3cee521fb175dc3756135d1e162c8702'}\n\n```{.r .cell-code}\netb18$m1202[etb18$m1202<0] <- NA # missings ausschließen\netb18 %>% \n  count(S1,m1202) %>% \n  filter(!is.na(m1202))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  S1           m1202                                                           n\n  <dbl+lbl>    <dbl+lbl>                                                   <int>\n1 1 [männlich] 1 [Ohne Berufsabschluss]                                      594\n2 1 [männlich] 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamt…  4371\n3 1 [männlich] 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.…  1073\n4 1 [männlich] 4 [Fachhochschule, Universität/ geh., höhere Beamte]         4015\n5 2 [weiblich] 1 [Ohne Berufsabschluss]                                      497\n6 2 [weiblich] 2 [duale o. schulische Berufsausbildung/einf.,mittl. Beamt…  4926\n7 2 [weiblich] 3 [Aufstiegsfortbildung (Meister, Techniker, kfm. AFB u.ä.…   652\n8 2 [weiblich] 4 [Fachhochschule, Universität/ geh., höhere Beamte]         3839\n```\n:::\n:::\n\n\nDa wir mit `count()` einen `data.frame` erhalten, können wir diesen direkt in `ggplot()` schicken und mit `geom_col()` Säulen darstellen:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/colcount_f40fb042373ddf5f45a701e810a792aa'}\n\n```{.r .cell-code}\netb18 %>% \n  count(S1,m1202) %>% \n  filter(!is.na(m1202)) %>% \n  ggplot(data = ., aes(x = m1202, y = n, fill = factor(S1))) +\n  geom_col(position=position_dodge()) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/colcount-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nWie kommen wir jetzt an die relativen Häufigkeiten? Wir erweitern einfach die Pipeline vor `ggplot()` um den `prop.table()`-Befehl aus Kapitel 2. Mit `scale_y_continuous(labels = scales::label_percent(accuracy = 1)) ` können wir außerdem die y-Achse in Prozentwerten angezeigen lassen:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/scalepct_aff14c05222a0e15d5279a91bec4958a'}\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n  count(S1,m1202) %>% \n  group_by(S1) %>% \n  mutate(pct_gender = prop.table(n)) %>% \n  ggplot(data = ., aes(x = m1202, y = pct_gender, fill = factor(S1))) +\n  geom_col(position=position_dodge()) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/scalepct-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n  count(S1,m1202) %>% \n  group_by(S1) %>% \n  mutate(pct_gender = prop.table(n)) %>% \n  ggplot(data = ., aes(x = m1202, y = pct_gender, fill = factor(S1))) +\n  geom_col(position=position_dodge())  +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/scalepct-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n\nAuch diese Grafiken können wir dann wieder mit `scale_...` anpassen und mit `labs()` ausführlich labeln - alle Optionen sind konsistent über alle Darstellungsformen hinweg: \n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/fullplot_f7c6b19eda88ca389fc5f65f0885c7b2'}\n\n```{.r .cell-code}\netb18 %>% \n  filter(!is.na(m1202)) %>% \n  count(S1,m1202) %>% \n  group_by(S1) %>% \n  mutate(pct_gender = prop.table(n)) %>% \n  ggplot(data = ., aes(x = m1202, y = pct_gender, fill = factor(S1))) +\n  geom_col(position=position_dodge())  +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 1))  + \n  scale_fill_manual(values = c(\"navajowhite\",\"navy\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\")) +\n  scale_x_continuous(breaks = 1:4 , labels = c(\"ohne Ausb.\", \"duale Ausb.\",\"Aufstiegsfortb.\",\"FH/Uni\")) +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) +\n  labs(title = \"Ausbildungsabschlüsse nach Geschlecht\",\n       subtitle = \"Relative Häufigkeiten\",\n       caption = \"Quelle: ETB 2018\",\n       x = \"Ausbildung\",\n       y = \"Relative Häufigkeit\",\n       fill = \"Geschlecht\" ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/fullplot-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n### [Übung](#pltue3)  {#ue4_03}\n\n## Übungen\nNutzen Sie für alle Aufgaben die ersten 150 Beobachtungen (`etb18_small`), um den Plot einfach zu halten. Denken Sie daran die fehlenden Werte mit `filter()` auszuschließen, Sie können dazu diesen Befehl verwenden:\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-24_7abae52e58b73425525cc2825c71f121'}\n\n```{.r .cell-code}\netb18 <-\n  haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",\n    col_select = c(\"h1216d\", \"S2_j\", \"S1\", \"m1202\", \"F518_SUF\", \"nt\", \"gkpol\")\n    )\netb18_small <-\n  etb18 %>% filter(S2_j < 9999, h1216d > 0, F518_SUF < 99998) %>% slice(1:150)\n```\n:::\n\n\n### Übung 1 {#pltue1}\n\n+ Erstellen Sie einen Scatterplot für die Variablen Geburtsjahr (`S2_j`, x-Achse) und Dauer der Ausbildung (`h1216d`, y-Achse). \n+ Legen Sie die Farbe so fest, dass Männer und Frauen unterschiedliche Farben gekennzeichnet werden (`S1`)\n+ Verändern Sie die Farben auf `goldenrod1` und `dodgerblue4` fest ([oder eine beliebige andere](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf))\n+ Beschriften Sie die Achsen und Legende!\n\n[Zurück nach oben](#ue4_01)\n\n\n### Übung 2 {#pltue2}\n\n+ Erstellen Sie einen Boxplot für die Verteilung des Einkommens (`F518_SUF`).\n+ Passen Sie diesen Boxplot so an, dass die Einkommensverteilungen für Männer und Frauen getrennt dargestellt werden. (Profi-Knobelfrage: wie können Sie die Boxen nach `S1` einfärben?)\n+ Erstellen Sie ein Histogramm, ebenfalls für die Einkommensverteilung und mit getrennten Farben für Männer und Frauen.\n+ Was passiert wenn Sie für das Histogramm statt `color =` anstelle von `fill =` verwenden?\n+ Verändern Sie die Farben der Balken mit Hilfe von `scale_fill_manual` oder `scale_fill_brewer` oder `scale_fill_viridis` (Siehe Abschnitte [Farben](#farben) und [ColorBreweR](#brewer) und [viridis](#viridis) unter \"weitere Optionen\")\n+ Ändern Sie die Darstellung in einen density-Plot\n\n[Zurück nach oben](#ue4_02)\n\n### Übung 3 {#pltue3}\n\n\n+ Erstellen Sie ein Säulen-Diagramm für die Größenklasse des Wohnorts der Befragten (`gkpol`)\n+ Erstellen Sie ein Säulen-Diagramm für die Größenklasse des Wohnorts der Befragten (`gkpol`) getrennt nach der Variable `nt` - färben Sie die Säulen nach `nt`. Die Variable `nt` erfasst, ob die Befragten einer Nebentätigkeit nachgehen (1 = ja/ 0 = nein).\n\nKleine Hilfe: das sind die Labels für `gkpol` 1-7:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-25_df1f37b263de3c9e4fca657a049c7533'}\n::: {.cell-output .cell-output-stdout}\n```\nc(\"<2k\", \"2k bis <5k\", \"5k bis <20k\", \"20k bis <50k\", \"50k bis <100k\", \n\"100k bis <500k\", \"500k und mehr\")\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-26_4112b2ab27b1ff2fb8177b949412758b'}\n\n```{.r .cell-code  code-fold=\"true\"}\nscale_x_continuous(breaks = 1:7,\n                   labels = c(\"<2k\", \"2k bis <5k\", \"5k bis <20k\", \"20k bis <50k\", \n                              \"50k bis <100k\", \"100k bis <500k\", \"500k und mehr\"))\n```\n:::\n\n\n[Zurück nach oben](#ue4_03)\n\n\n## Weitere Optionen für ggplot2 \n\n### Aesthetics {#aes}\n\n\n::: {.cell layout-align=\"center\" fig.asp='0.35' hash='04_viz_cache/html/unnamed-chunk-27_f221586f0f0b474206f0f8bdf16a8d42'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=65% height=65%}\n:::\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-27-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n### themes {#themes} \n\nMit sog. themes können wir das layout der Grafik verändern. \nWeitere Themes sind zB: `theme_light()`, `theme_classic()` ider `theme_void()`, eine Liste findet sich [hier](https://ggplot2.tidyverse.org/reference/ggtheme.html). \nAußerdem bietet das Paket [{ggthemes}](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes) (`install.packages('ggthemes')`) eine große Auswahl.\n\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-28_11b0f28947ff57be2d185e888719a595'}\n\n```{.r .cell-code}\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point(size = 2) + \n  theme_minimal()\n\nggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point(size = 2) +\n  theme_dark()\n```\n:::\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-29_e896c992f007c723c4ce450e541cddd3'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=65% height=65%}\n:::\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-29-2.png){fig-align='center' width=65% height=65%}\n:::\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-29-3.png){fig-align='center' width=65% height=65%}\n:::\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-29-4.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n### Farben {#farben}\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-30_07ab94244836c6b4c02636d09f222be9'}\n\n```{.r .cell-code}\np1 <- ggplot(data = etb18_small, aes(x = zpalter, y = az, color = factor(S1))) + \n  geom_point(size = 3) \n```\n:::\n\n\n\nNeben den im Beispiel verwendeten Farben für `fill` können natürlich auch noch unzählige weitere Farben in `scale_fill_manual`  und `scale_color_manual` verwendet werden:\n\n+ [Hier](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) findet sich eine Übersicht mit allen Farbnamen, die verstanden werden\n+ Alternativ können auch sog. HEX-Codes angeben werden, die bspw. mit dem [Adobe Color Wheel](https://color.adobe.com/de/create/color-wheel) oder [Color Hex](https://www.color-hex.com/) erstellt werden können.\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-31_37d91cb57b3ea5c9749dcedf318b4a5d'}\n\n```{.r .cell-code}\np1 +  scale_color_manual(values = c(\"dodgerblue4\",\"sienna1\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") )\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\np1 +  scale_color_manual(values = c(\"#005b96\",\"#6497b1\"),\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") )\n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-31-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n#### ColorBreweR {#brewer}\n\nAlternativ zur manuellen Auswahl der Farben mit `scale_fill_manual` und `scale_color_manual` können mit `scale_fill_brewer()` auch vorgegebene Farbpaletten des *colorbrewer* verwendet werden. Dazu muss lediglich `scale_fill_brewer()` anstelle von `scale_fill_manual` angeben werden und statt `values` eine der Paletten - eine Übersicht findet sich [hier](http://colorbrewer2.org/). Die Farbpaletten von ColorBreweR sind alle in ggplot2 integriert.\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-32_0b3d47bc8b025105157f0d4747ea7b3c'}\n\n```{.r .cell-code}\np1 +\n  scale_color_brewer(palette = \"RdYlBu\",\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n#### viridis {#viridis}\n\nAnalog dazu gibt es auch die [{viridis}](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)-Paletten, welche durchgängig \"colorblind-safe\" und ebenfalls in {ggplot2} integriert sind. Allerdings ist hier zu beachten, dass für Farbauswahlen basierend auf einer kategorialen Variable `scale_color_viridis_d()` zu verwenden ist. Soll die Farbe entlang einer numerischen/metrischen Variable bestimmt werden, dann ist `scale_color_viridis_c()` zu verwenden. Außerdem kann mit `begin` und `end` die Breite der Farbskala angepasst werden:\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-33_96cfb1284fc8bd4e80e434fbeb1596ae'}\n\n```{.r .cell-code}\np1 +\n  scale_color_viridis_d(option=\"magma\",\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\np1 +\n  scale_color_viridis_d(option=\"magma\",begin = .65,end = .85,\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-33-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-34_3b6208b1801683983d57d307f2aa279f'}\n::: {.cell-output-display}\n![](./pic/104_viridis-scales.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\n\n#### Weitere Farbpaletten\n\nDarüber hinaus gibt es unzählige Pakete, die ebenfalls `scale_color_` und `scale_fill_`-Funktionen bieten:\nHier noch zwei Beispiele mit  [{scico}](https://github.com/thomasp85/scico) und [{MetBrewer}](https://github.com/BlakeRMills/MetBrewer), welches Farben aus Bildern im Metropolitan Museum of Art enthält:\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-35_32db59aa5608195ff829c0c78322d522'}\n\n```{.r .cell-code}\ninstall.packages('scico')\ninstall.packages(\"MetBrewer\")\n```\n:::\n\n\n[{scico}](https://github.com/thomasp85/scico) Farbpaletten\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-36_7b820aec5e1e8bde88de847fe07f4920'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=65% height=60%}\n:::\n:::\n\n\n[{MetBrewer}](https://github.com/BlakeRMills/MetBrewer) Farbpaletten\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-37_6cbc72c08dd0d96cbd5d5435d5bbf9cf'}\n::: {.cell-output-display}\n![](./pic/104_metbrewer.png){fig-align='center' width=100% height=65%}\n:::\n:::\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-38_d34acaca1b3d041654cacdf303d6bce4'}\n\n```{.r .cell-code}\nlibrary(scico)\np1 +\n  scale_color_scico_d(palette = \"oslo\",begin = .5,end = .8,\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=65% height=65%}\n:::\n\n```{.r .cell-code}\nlibrary(MetBrewer)\np1 +\n  scale_color_met_d(name = \"Kandinsky\",\n                    breaks = c(1,2), labels = c(\"Männer\", \"Frauen\") ) \n```\n\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-38-2.png){fig-align='center' width=65% height=65%}\n:::\n:::\n\n\nVergleichbare Pakete gibt es auch für \n\n+ [{DutchMasters}](https://github.com/EdwinTh/dutchmasters) - Farbpaletten aus Bildern niederländischer Maler\n+ [{wesanderson}](https://github.com/karthik/wesanderson) - Farbpaletten basierend auf verschiedenen Filmen von Wes Anderson (The Grand Budapest Hotel usw.)\n+ [{ochRe}](https://github.com/hollylkirk/ochRe) - Farbpaletten \"inspired by Australian art, landscapes and wildlife\"\n+ [{paletteer}](https://github.com/EmilHvitfeldt/paletteer) bietet eine riesige Auswahl verschiedenster Farbpaletten\n\n\n### Shapes {#shape1}\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-39_5542df45ce152afe868837b9b4ed2456'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=50% height=50%}\n:::\n:::\n\n\n[**Zusätzlicher Überblick**](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/)\n\n### Linetypes {#line}\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-40_94041d833a80f7a07aded7e13c5844e5'}\n::: {.cell-output-display}\n![](04_viz_files/figure-html/unnamed-chunk-40-1.png){fig-align='center' width=50% height=30%}\n:::\n:::\n\n\nÜbersicht zu Shapes und Linetypes im [R Cookbook](http://www.cookbook-r.com/Graphs/Shapes_and_line_types/)\n\n\n\n## Linksammlung\n\n+ [From Data to Viz ](https://www.data-to-viz.com/#explore) bietet einen Entscheidungsbaum für verschiedene Zusammenhänge und Deskriptionen mit Beispiel-Syntax\n\n\n::: {.cell layout-align=\"center\" hash='04_viz_cache/html/unnamed-chunk-41_675582c9286e815fcbf2f4d5aafaa049'}\n::: {.cell-output-display}\n![](./pic/104_decision.png){fig-align='center' width=80% height=80%}\n:::\n:::\n\n\n+ Schriftgröße und -farbe anpassen: [Hier](https://cmdlinetips.com/2021/05/tips-to-customize-text-color-font-size-in-ggplot2-with-element_text/) findet sich eine gute Übersicht, wie die Schriftgröße und -farbe in `{ggplot2}` angepasst werden kann.\n\n+ Das [Graph Kapitel des R Cookbooks](www.cookbook-r.com/Graphs/) ist eine hervorragende Quelle für alle möglichen Optionen und eine grundlegende Übersicht - bspw. zur Anpassung der [Legende](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)), [Linien- und Punktvarianten](http://www.cookbook-r.com/Graphs/Shapes_and_line_types) oder den [Achsen](http://www.cookbook-r.com/Graphs/Axes_(ggplot2))\n\n\n+ Die [R Graph Gallery](https://r-graph-gallery.com/) ist noch etwas umfangreicher und bietet noch weitere Visualisierungsideen\n\n+ Für alle, die mehr zu gelungenen (und schönen) Datenvisualisierungen mit `{ggplot2}` erfahren möchten, ist das [Tutorial von Cédric Scherer](https://cedricscherer.netlify.app/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/) ein hervorragender Einstieg. [Dieser Workshop](https://github.com/z3tt/beyond-bar-and-box-plots/blob/main/README.md#talk-resources) eignet sich sehr gut für eine Vertiefung.\n\n+ [Dieser Workshop](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/) bietet weitere Einblicke wie Datenvisualisierungen mit `{ggplot2}` schöner gestaltet werden können.\n\n+ [Eine Liste von Erweiterungen für ggplot2](https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages.html)\n\n+ [**Das** Buch zu {ggplot2}](https://ggplot2-book.org/index.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}